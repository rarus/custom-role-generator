
#Область ПрограммныйИнтерфейс

// Выполняет генерацию расширения с ролями из справочника ПодключаемыеРоли и подключение его к базе данных.
// При подключенит расширения автоматически снимаются признаки безопасного режима и защиты от опасных действий.
// 
// Возвращаемое значение:
//  Структура - с полями:
// * Успешно - Булево - Признак успешно выполненной операции;
// * ТекстОшибки - Строка - Текст ошибки возникшей при генерации расширения или установки его в базу данных.
//
Функция ОбновлениеРасширение() Экспорт
	
	РезультатОбновления = Новый Структура("Успешно,ТекстОшибки", Ложь, "");

	ВременныйКаталогБазы = КаталогВременныхФайлов() + "Base";
	КаталогРасширения(ВременныйКаталогБазы, РезультатОбновления.ТекстОшибки);
	
	ПустаяБаза = ПолучитьОбщийМакет("гпр_ПустаяБазаДанных").ОткрытьПотокДляЧтения();
	Архив = Новый ЧтениеZipФайла(ПустаяБаза);
	Архив.ИзвлечьВсе(ВременныйКаталогБазы);
	Архив.Закрыть();
	ПустаяБаза.Закрыть();
	
	ИмяРасширения = "ПользовательскиеРоли";
	ПутьКРасширению = ВременныйКаталогБазы + ПолучитьРазделительПутиСервера() + ИмяРасширения + ".cfe";
	ЗапуститьПриложение(КомандаЗагрузкиРасширенияВБазу(ВременныйКаталогБазы, ИмяРасширения),, Истина);
	ЗапуститьПриложение(КомандаВыгрузкиРасширенияИзБазы(ВременныйКаталогБазы, ИмяРасширения),, Истина);
	
	РасширениеРолей = Новый ДвоичныеДанные(ПутьКРасширению);
	УстановитьРасширениеВБазу(РасширениеРолей, ИмяРасширения);
	
	Попытка
		
		УдалитьФайлы(ВременныйКаталогБазы);
		
	Исключение
	
		ЗаписьЖурналаРегистрации(
			"Герерация расщирения.Удаление файлов", УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	
	КонецПопытки;
	
	РезультатОбновления.Успешно = Истина;
	Возврат РезультатОбновления;
	
КонецФункции

Функция ОписаниеОбъекта(ВидОбъекта, ИмяОбъекта) Экспорт
	
	РеквизитыОбъекта = Новый ТаблицаЗначений();
	РеквизитыОбъекта.Колонки.Добавить("ТипРеквизита", Новый ОписаниеТипов("ПеречислениеСсылка.гпр_ТипыРеквизитовОбъекта"));
	РеквизитыОбъекта.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	РеквизитыОбъекта.Колонки.Добавить("ИмяРеквизитаТабличнойЧасти", Новый ОписаниеТипов("Строка"));
	РеквизитыОбъекта.Колонки.Добавить("ПравоДоступа", Новый ОписаниеТипов("ПеречислениеСсылка.гпр_ПраваДоступа"));
	РеквизитыОбъекта.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
	РеквизитыОбъекта.Колонки.Добавить("ПравоУстановлено", Новый ОписаниеТипов("Булево"));	
		
	ДоступныеОбъектуГруппы = гпр_РаботаСКонфигурациейСервер.ДоступныеГруппыПодчиненныхЭлементовПоВидуОбъекта(ВидОбъекта);
	ИмяВидаОбъекта = Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданных(ВидОбъекта);
	
	Если Не ЗначениеЗаполнено(ДоступныеОбъектуГруппы) Тогда
		
		Возврат РеквизитыОбъекта;
		
	КонецЕсли;
	
	ПраваДоступаРеквизитаРеквизита = гпр_РаботаСКонфигурациейСервер.ДоступныеТипуРеквизитаПраваДоступа(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	
	Для Каждого ГруппаЭлементов Из ДоступныеОбъектуГруппы Цикл
		
		ПраваДоступаРеквизита = гпр_РаботаСКонфигурациейСервер.ДоступныеТипуРеквизитаПраваДоступа(ГруппаЭлементов.ТипРеквизита);
		ЭлементыГруппы = Метаданные[ИмяВидаОбъекта][ИмяОбъекта][ГруппаЭлементов.ИмяТипаРеквизита];
		
		Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
			
			Для Каждого ТекущееПравоДоступа Из ПраваДоступаРеквизита Цикл
				НовыйЭлементГруппы = РеквизитыОбъекта.Добавить();
				НовыйЭлементГруппы.ТипРеквизита = ГруппаЭлементов.ТипРеквизита;
				НовыйЭлементГруппы.ИмяРеквизита = ЭлементГруппы.Имя;
				НовыйЭлементГруппы.ПравоДоступа = ТекущееПравоДоступа.Значение;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ГруппаЭлементов.РеквизитРеквизита) Тогда
				
				ИмяГруппыРеквизитов = Перечисления.гпр_ТипыРеквизитовОбъекта
					.ИмяГруппыРеквизитовПоТипу(ГруппаЭлементов.РеквизитРеквизита);
				ПодчиненныеРеквизиты = Метаданные[ИмяВидаОбъекта][ИмяОбъекта][ГруппаЭлементов.ИмяТипаРеквизита][ЭлементГруппы.Имя][ИмяГруппыРеквизитов];
				
				Для Каждого ПодчиненныйРеквизит Из ПодчиненныеРеквизиты Цикл
					
					Для Каждого ТеекущеПраваДоступаРеквизитаРеквизита Из ПраваДоступаРеквизитаРеквизита Цикл
						НовыйЭлементГруппы = РеквизитыОбъекта.Добавить();
						НовыйЭлементГруппы.ТипРеквизита = ГруппаЭлементов.РеквизитРеквизита;
						НовыйЭлементГруппы.ИмяРеквизита = ЭлементГруппы.Имя;
						НовыйЭлементГруппы.ИмяРеквизитаТабличнойЧасти = ПодчиненныйРеквизит.Имя;
						НовыйЭлементГруппы.ПравоДоступа = ТеекущеПраваДоступаРеквизитаРеквизита.Значение;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КаталогРасширения(КаталогФайлов, ТекстОшибки)
	
	ПутьККаталогуРасширения = КаталогФайлов + "\ExtensionConfiguration\";
	УдалитьФайлы(ПутьККаталогуРасширения);
	
	// Распакуем туда шаблон расширения
	ШаблонРасширения = ПолучитьОбщийМакет("гпр_ШаблонРасширения").ОткрытьПотокДляЧтения();
	Архив = Новый ЧтениеZipФайла(ШаблонРасширения);
	Архив.ИзвлечьВсе(ПутьККаталогуРасширения);
	Архив.Закрыть();
	ШаблонРасширения.Закрыть();
	
	// Заполним файл Configuration.xml объектами конфигурации
	ЗаполнитьОбъектыКонфигурации(ПутьККаталогуРасширения);
	
	// Дополним расширение новыми ролями
	ДополнитьРасширениеРолями(ПутьККаталогуРасширения); 
	
	Возврат ПутьККаталогуРасширения;
	
КонецФункции

Процедура ЗаполнитьОбъектыКонфигурации(КаталогРасширения)
	
	ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузкиКонфигурации();
	
	// Заменим версию XML для языка
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогРасширения + "Languages\Русский.xml");
	DOMПостроитель = Новый ПостроительDOM();
	DOMДокумент = DOMПостроитель.Прочитать(ЧтениеXML);
	ЧтениеXML.Close();
	
	DOMДокумент.ПолучитьЭлементыПоИмени("MetaDataObject")[0].Атрибуты.
		ПолучитьИменованныйЭлемент("version").ТекстовоеСодержимое = ВерсияФорматаВыгрузки;
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогРасширения + "Languages\Русский.xml");
	СохранениеDOM = Новый ЗаписьDOM;
	СохранениеDOM.Записать(DOMДокумент, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	// Считаем файл конфигурации и создадим объект DOM
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогРасширения + "Configuration.xml");
	DOMПостроитель = Новый ПостроительDOM();
	DOMДокумент = DOMПостроитель.Прочитать(ЧтениеXML);
	ЧтениеXML.Close();
	
	// Заполним служебные поля
	DOMДокумент.ПолучитьЭлементыПоИмени("MetaDataObject")[0].Атрибуты.
		ПолучитьИменованныйЭлемент("version").ТекстовоеСодержимое = ВерсияФорматаВыгрузки;
	
	DOMДокумент.ПолучитьЭлементыПоИмени("MetaDataObject")[0].ПолучитьЭлементыПоИмени("Configuration")[0]
		.ПолучитьЭлементыПоИмени("Properties")[0].ПолучитьЭлементыПоИмени("Version")[0].ТекстовоеСодержимое =
		НомерВерсииПользовательскихРолей();
	
	// Заполним объектами
	ЭлементыDOM = DOMДокумент.ПолучитьЭлементыПоИмени("ChildObjects"); 
	
	// Добавим каждый объект в файл
	ОбъектыКонфигурации = Новый ТаблицаЗначений;
	ОбъектыКонфигурации.Колонки.Добавить("ВидОбъекта");
	ОбъектыКонфигурации.Колонки.Добавить("Объект");
	ОбъектыКонфигурации.Колонки.Добавить("ПолноеИмя");	
		
	Для Каждого ТекущийОбъект Из Перечисления.гпр_ВидыМетаданных Цикл
		
		ДобавитьОбъектКонфигурации(
			DOMДокумент,
			ЭлементыDOM[0],
			ТекущийОбъект,
			ОбъектыКонфигурации
		);
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогРасширения + "Configuration.xml");
	СохранениеDOM = Новый ЗаписьDOM;
	СохранениеDOM.Записать(DOMДокумент, ЗаписьXML);
	ЗаписьXML.Закрыть();	
	
	// Добавим объекты в XML файл
	ШаблонОбъекта = ПолучитьОбщийМакет("гпр_ШаблонОбъектаКонфигурации").ПолучитьТекст();
	Для Каждого ТекущийОбъект Из ОбъектыКонфигурации Цикл
		
		ДобавитьОбъектВФайл(
			ТекущийОбъект,
			КаталогРасширения,
			ШаблонОбъекта,
			ВерсияФорматаВыгрузки
		);
		
	КонецЦикла;

	
КонецПроцедуры

Функция ВерсияФорматаВыгрузкиКонфигурации()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	НомераВерсии = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	НомерВерсии = СтрШаблон("%1.%2.%3", НомераВерсии[0], НомераВерсии[1], НомераВерсии[3]);
	
	ФорматыВерсий = СписокФорматовВерсииФорматов();
	ВерсияФормата = ФорматыВерсий.Получить(НомерВерсии);
	
	Если ВерсияФормата <> Неопределено Тогда
		Возврат ВерсияФормата;
	КонецЕсли;
	
	Возврат "2.11"; 

КонецФункции

Функция СписокФорматовВерсииФорматов()
	
	ФорматыВерсий = Новый Соответствие();
	ФорматыВерсий.Вставить("8.3.18", "2.11");
	ФорматыВерсий.Вставить("8.3.19", "2.12");
	ФорматыВерсий.Вставить("8.3.20", "2.13");
	ФорматыВерсий.Вставить("8.3.21", "2.14");	
	ФорматыВерсий.Вставить("8.3.22", "2.15");
	ФорматыВерсий.Вставить("8.3.23", "2.16");
	ФорматыВерсий.Вставить("8.3.24", "2.17");
	ФорматыВерсий.Вставить("8.3.25", "2.18");
	
	Возврат ФорматыВерсий;	
	
КонецФункции

Процедура ДобавитьОбъектКонфигурации(Документ, ЭлементДокумента, ОбъектМетаданных, ОбъектыКонфигурации)
	
	ИмяОбъектаМетаданных = Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданных(ОбъектМетаданных);
	ТипОбъекта = Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданныхДляРасширения(ОбъектМетаданных);
	
	Для Каждого ТекущийОбъект Из Метаданные[ИмяОбъектаМетаданных] Цикл
		
		// Уберем объекты расширений
		Если ТекущийОбъект.РасширениеКонфигурации() <> Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		ИмяОбъета = СтрРазделить(ТекущийОбъект.ПолноеИмя(), ".", Ложь);
		
		Объект = Документ.СоздатьЭлемент(ТипОбъекта);
		Объект.ТекстовоеСодержимое = ИмяОбъета[1];
		ЭлементДокумента.ДобавитьДочерний(Объект);
		
		НоваяСтрока = ОбъектыКонфигурации.Добавить();
		НоваяСтрока.ВидОбъекта = ОбъектМетаданных;
		НоваяСтрока.Объект = ИмяОбъета[1];
		НоваяСтрока.ПолноеИмя = ТекущийОбъект.ПолноеИмя();
		
		Если ОбъектМетаданных = Перечисления.гпр_ВидыМетаданных.Подсистема Тогда
			
			ДобавитьПодсистему(Документ, ТекущийОбъект, ОбъектыКонфигурации);
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодсистему(Документ, Подсистема, ОбъектыКонфигурации)
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		
		ИмяОбъета = СтрРазделить(ПодчиненнаяПодсистема.ПолноеИмя(), ".", Ложь);
		НоваяСтрока = ОбъектыКонфигурации.Добавить();
		НоваяСтрока.ВидОбъекта = Перечисления.гпр_ВидыМетаданных.Подсистема;
		НоваяСтрока.Объект = ИмяОбъета.Получить(ИмяОбъета.ВГраница());
		НоваяСтрока.ПолноеИмя = ПодчиненнаяПодсистема.ПолноеИмя();
		
		ДобавитьПодсистему(
			Документ,
			ПодчиненнаяПодсистема,
			ОбъектыКонфигурации);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбъектВФайл(ТекущийОбъект, КаталогРасширения, ШаблонОбъекта, ВерсияФорматаВыгрузки)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ШаблонОбъекта);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Close();
	
	ДокументDOM.ПервыйДочерний.Атрибуты.ПолучитьИменованныйЭлемент("version").Значение = ВерсияФорматаВыгрузки;
		
	ОбъектЗаписи = ДокументDOM.СоздатьЭлемент(Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданныхДляРасширения(ТекущийОбъект.ВидОбъекта));
	ЗаполнитьУникальныйИдентификаторОбъекта(ДокументDOM, ОбъектЗаписи);
	
	Если Не ОбъектБезРеквизитов(ТекущийОбъект.ВидОбъекта) Тогда
		
		ВнутренняяИнформация = ДокументDOM.СоздатьЭлемент("InternalInfo");
		
		Если ТекущийОбъект.ВидОбъекта = Перечисления.гпр_ВидыМетаданных.ПланОбмена Тогда
			
			ЭтаЗапись = ДокументDOM.СоздатьЭлемент("http://v8.1c.ru/8.3/xcf/readable", "ThisNode");
			ЭтаЗапись.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор);
			ВнутренняяИнформация.ДобавитьДочерний(ЭтаЗапись);
			
		КонецЕсли;
		
		МетаданныеОбъекта = СтруктураМетеданныхОбъекта(ТекущийОбъект.ВидОбъекта);
		
		Для Каждого ЭлементОбъекта Из МетаданныеОбъекта Цикл
			
			НовыйЭлемент = ДокументDOM.СоздатьЭлемент("http://v8.1c.ru/8.3/xcf/readable", "GeneratedType");
			ИмяАтрибута = ДокументDOM.СоздатьАтрибут("name");
			ИмяАтрибута.Значение = СтрШаблон("%1.%2", ЭлементОбъекта.Ключ, ТекущийОбъект.Объект);
			НовыйЭлемент.Атрибуты.УстановитьИменованныйЭлемент(ИмяАтрибута);
			АтрибутКатегории = ДокументDOM.СоздатьАтрибут("category");
			АтрибутКатегории.Значение = ЭлементОбъекта.Значение;
			НовыйЭлемент.Атрибуты.УстановитьИменованныйЭлемент(АтрибутКатегории);
			ТипЭлемента = ДокументDOM.СоздатьЭлемент("http://v8.1c.ru/8.3/xcf/readable", "TypeId");
			ТипЭлемента.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор());
			ЗначениеЭлемента = ДокументDOM.СоздатьЭлемент("http://v8.1c.ru/8.3/xcf/readable", "ValueId");
			ЗначениеЭлемента.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор());
			НовыйЭлемент.ДобавитьДочерний(ТипЭлемента);
			НовыйЭлемент.ДобавитьДочерний(ЗначениеЭлемента);
			ВнутренняяИнформация.ДобавитьДочерний(НовыйЭлемент);
			
		КонецЦикла;
		
		ОбъектЗаписи.ДобавитьДочерний(ВнутренняяИнформация);
			
	КонецЕсли;
	
	СвойстваОбъекта = ОсновныеСвойстваОбъекта(ДокументDOM, ТекущийОбъект.Объект);
	ОбъектЗаписи.ДобавитьДочерний(СвойстваОбъекта);
	
	Если НЕ ОбъектБезПодчиненныхЭлементов(ТекущийОбъект.ВидОбъекта) Тогда
		ЭлементыОбъекта = ДокументDOM.СоздатьЭлемент("ChildObjects");
		ДополнитьЭлементамиОбъекта(ДокументDOM, ТекущийОбъект, ЭлементыОбъекта);
		ОбъектЗаписи.ДобавитьДочерний(ЭлементыОбъекта);		
	КонецЕсли;
	
	ДокументDOM.ПервыйДочерний.ДобавитьДочерний(ОбъектЗаписи);
	
	ИмяКаталога = Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданныхДляРасширения(ТекущийОбъект.ВидОбъекта);
	
	Если ТекущийОбъект.ВидОбъекта = Перечисления.гпр_ВидыМетаданных.Подсистема Тогда
		ИмяПодсистемы = СтрРазделить(ТекущийОбъект.ПолноеИмя, ".");
		Если ИмяПодсистемы.Количество() > 2 Тогда
			ТекущийОбъект.Объект = ИмяПодсистемы[ИмяПодсистемы.ВГраница()];
			ИмяПодсистемы.Удалить(ИмяПодсистемы.ВГраница());
			ИмяПодсистемы.Добавить("");
			АдресКаталога = СтрСоединить(ИмяПодсистемы, "\");
			ПутьКОбъекту = КаталогРасширения + АдресКаталога;
			ИмяПодчиеннойПодсистемы = СтрШаблон("\%1\", ИмяКаталога);
			ПутьКОбъекту = СтрЗаменить(ПутьКОбъекту, "\Подсистема\", ИмяПодчиеннойПодсистемы);
		Иначе
			ПутьКОбъекту = СтрШаблон("%1%2", КаталогРасширения, ИмяКаталога);
		КонецЕсли;
	Иначе
		ПутьКОбъекту = СтрШаблон("%1%2", КаталогРасширения, ИмяКаталога);
	КонецЕсли;
	
	СоздатьКаталог(ПутьКОбъекту);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.OpenFile(ПутьКОбъекту + "\" + ТекущийОбъект.Объект + ".xml");
	СохранениеDOM = Новый ЗаписьDOM;
	СохранениеDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьУникальныйИдентификаторОбъекта(Знач ДокументDOM, Знач Обект)
	
	АтрибутУИД = ДокументDOM.СоздатьАтрибут("uuid");
	АтрибутУИД.Значение = Строка(Новый УникальныйИдентификатор());
	Обект.Атрибуты.УстановитьИменованныйЭлемент(АтрибутУИД);
	
КонецПроцедуры

Функция ОбъектБезРеквизитов(ВидОбъекта)
	
	ОбъектыБезРеквизитов = Новый Массив;
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ОбщаяКоманда);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.Подсистема);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ПараметрСеанса);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ОбщийРеквизит);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ОбщаяФорма);
	
	Возврат ОбъектыБезРеквизитов.Найти(ВидОбъекта) <> Неопределено;
	
КонецФункции

Функция ОбъектБезПодчиненныхЭлементов(ВидОбъекта)
	
	ОбъектыБезРеквизитов = Новый Массив;
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ОбщаяКоманда);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ПараметрСеанса);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ОбщийРеквизит);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.ОбщаяФорма);
	ОбъектыБезРеквизитов.Добавить(Перечисления.гпр_ВидыМетаданных.Константа);
	
	Возврат ОбъектыБезРеквизитов.Найти(ВидОбъекта) <> Неопределено;
	
КонецФункции

Функция СтруктураМетеданныхОбъекта(ВидОбъекта)
    
	МетаданныеОбъектов = Новый Соответствие;
	
	РегистрНакопления = Новый Структура;
	РегистрНакопления.Вставить("AccumulationRegisterRecord", "Record");
	РегистрНакопления.Вставить("AccumulationRegisterManager", "Manager");
	РегистрНакопления.Вставить("AccumulationRegisterSelection", "Selection");
	РегистрНакопления.Вставить("AccumulationRegisterList", "List");
	РегистрНакопления.Вставить("AccumulationRegisterRecordSet", "RecordSet");
	РегистрНакопления.Вставить("AccumulationRegisterRecordKey", "RecordKey");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрНакоплений, РегистрНакопления);
	
	РегистрБухгалтерии = Новый Структура;
	РегистрБухгалтерии.Вставить("AccountingRegisterRecord", "Record");
	РегистрБухгалтерии.Вставить("AccountingRegisterExtDimensions", "ExtDimensions");
	РегистрБухгалтерии.Вставить("AccountingRegisterRecordSet", "RecordSet");
	РегистрБухгалтерии.Вставить("AccountingRegisterRecordKey", "RecordKey");
	РегистрБухгалтерии.Вставить("AccountingRegisterSelection", "Selection");
	РегистрБухгалтерии.Вставить("AccountingRegisterList", "List");
	РегистрБухгалтерии.Вставить("AccountingRegisterManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрБухгалтерии, РегистрБухгалтерии);
	
	БизнесПроцесс = Новый Структура;
	БизнесПроцесс.Вставить("BusinessProcessObject", "Object");
	БизнесПроцесс.Вставить("BusinessProcessRef", "Ref");
	БизнесПроцесс.Вставить("BusinessProcessSelection", "Selection");
	БизнесПроцесс.Вставить("BusinessProcessList", "List");
	БизнесПроцесс.Вставить("BusinessProcessManager", "Manager");
	БизнесПроцесс.Вставить("BusinessProcessRoutePointRef", "RoutePointRef");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.БизнесПроцесс, БизнесПроцесс);
	
	РегистрРасчета = Новый Структура;
	РегистрРасчета.Вставить("CalculationRegisterRecord", "Record");
	РегистрРасчета.Вставить("CalculationRegisterManager", "Manager");
	РегистрРасчета.Вставить("CalculationRegisterSelection", "Selection");
	РегистрРасчета.Вставить("CalculationRegisterList", "List");
	РегистрРасчета.Вставить("CalculationRegisterRecordSet", "RecordSet");
	РегистрРасчета.Вставить("CalculationRegisterRecordKey", "RecordKey");
	РегистрРасчета.Вставить("RecalculationsManager", "Recalcs");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрРасчета, РегистрРасчета);
	
	Справочник = Новый Структура;
	Справочник.Вставить("CatalogObject", "Object");
	Справочник.Вставить("CatalogRef", "Ref");
	Справочник.Вставить("CatalogSelection", "Selection");
	Справочник.Вставить("CatalogList", "List");
	Справочник.Вставить("CatalogManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.Справочник, Справочник);
	
	ПланСчетов = Новый Структура;
	ПланСчетов.Вставить("ChartOfAccountsObject", "Object");
	ПланСчетов.Вставить("ChartOfAccountsRef", "Ref");
	ПланСчетов.Вставить("ChartOfAccountsSelection", "Selection");
	ПланСчетов.Вставить("ChartOfAccountsList", "List");
	ПланСчетов.Вставить("ChartOfAccountsManager", "Manager");
	ПланСчетов.Вставить("ChartOfAccountsExtDimensionTypes", "ExtDimensionTypes");
	ПланСчетов.Вставить("ChartOfAccountsExtDimensionTypesRow", "ExtDimensionTypesRow");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ПланСчетов, ПланСчетов);
	
	ПланВидовРасчета = Новый Структура;
	ПланВидовРасчета.Вставить("ChartOfCalculationTypesObject", "Object");
	ПланВидовРасчета.Вставить("ChartOfCalculationTypesRef", "Ref");
	ПланВидовРасчета.Вставить("ChartOfCalculationTypesSelection", "Selection");
	ПланВидовРасчета.Вставить("ChartOfCalculationTypesList", "List");
	ПланВидовРасчета.Вставить("ChartOfCalculationTypesManager", "Manager");
	ПланВидовРасчета.Вставить("DisplacingCalculationTypes", "DisplacingCalculationTypes");
	ПланВидовРасчета.Вставить("DisplacingCalculationTypesRow", "DisplacingCalculationTypesRow");
	ПланВидовРасчета.Вставить("BaseCalculationTypes", "BaseCalculationTypes");
	ПланВидовРасчета.Вставить("BaseCalculationTypesRow", "BaseCalculationTypesRow");
	ПланВидовРасчета.Вставить("LeadingCalculationTypes", "LeadingCalculationTypes");
	ПланВидовРасчета.Вставить("LeadingCalculationTypesRow", "LeadingCalculationTypesRow");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовРасчета, ПланВидовРасчета);
	
	ПланВидовХарактеристик = Новый Структура;
	ПланВидовХарактеристик.Вставить("ChartOfCharacteristicTypesObject", "Object");
	ПланВидовХарактеристик.Вставить("ChartOfCharacteristicTypesRef", "Ref");
	ПланВидовХарактеристик.Вставить("ChartOfCharacteristicTypesSelection", "Selection");
	ПланВидовХарактеристик.Вставить("ChartOfCharacteristicTypesList", "List");
	ПланВидовХарактеристик.Вставить("Characteristic", "Characteristic");
	ПланВидовХарактеристик.Вставить("ChartOfCharacteristicTypesManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовХарактеристик, ПланВидовХарактеристик);
	
	ОбщийРеквизит = Новый Структура;
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщийРеквизит, ОбщийРеквизит);	
	
	ОбщаяКоманда = Новый Структура;
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщаяКоманда, ОбщаяКоманда);	
	
	ОбщаяФорма = Новый Структура;
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщаяФорма, ОбщаяФорма);
	
	Константа = Новый Структура;
	Константа.Вставить("ConstantManager", "Manager");
	Константа.Вставить("ConstantValueManager", "ValueManager");
	Константа.Вставить("ConstantValueKey", "ValueKey");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.Константа, Константа);
	
	Обработка = Новый Структура;
	Обработка.Вставить("DataProcessorObject" , "Object" );
	Обработка.Вставить("DataProcessorManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.Обработка, Обработка);
		
	ЖурналДокументов = Новый Структура;
	ЖурналДокументов.Вставить("DocumentJournalSelection", "Selection");
	ЖурналДокументов.Вставить("DocumentJournalList", "List");
	ЖурналДокументов.Вставить("DocumentJournalManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ЖурналДокументов, ЖурналДокументов);
		
	Документ = Новый Структура;
	Документ.Вставить("DocumentObject", "Object");
	Документ.Вставить("DocumentRef", "Ref");
	Документ.Вставить("DocumentSelection", "Selection");
	Документ.Вставить("DocumentList", "List");
	Документ.Вставить("DocumentManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.Документ, Документ);
	
	ПланОбмена = Новый Структура;
	ПланОбмена.Вставить("ExchangePlanObject", "Object");
	ПланОбмена.Вставить("ExchangePlanRef", "Ref");
	ПланОбмена.Вставить("ExchangePlanSelection", "Selection");
	ПланОбмена.Вставить("ExchangePlanList", "List");
	ПланОбмена.Вставить("ExchangePlanManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ПланОбмена, ПланОбмена);	
	
	ВнешнийИсточникДанных = Новый Структура;
	ВнешнийИсточникДанных.Вставить("ExternalDataSourceManager", "Manager");
	ВнешнийИсточникДанных.Вставить("ExternalDataSourceTablesManager", "TablesManager");
	ВнешнийИсточникДанных.Вставить("ExternalDataSourceCubesManager", "CubesManager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ВнешнийИсточникДанных, ВнешнийИсточникДанных);
	
	КритерийОтбора = Новый Структура;
	КритерийОтбора.Вставить("FilterCriterionManager", "Manager");
	КритерийОтбора.Вставить("FilterCriterionList", "List");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.КритерийОтбора, КритерийОтбора);
		
	РегистрСведений = Новый Структура;
	РегистрСведений.Вставить("InformationRegisterRecord", "Record");
	РегистрСведений.Вставить("InformationRegisterManager", "Manager");
	РегистрСведений.Вставить("InformationRegisterSelection"	, "Selection");
	РегистрСведений.Вставить("InformationRegisterList", "List");
	РегистрСведений.Вставить("InformationRegisterRecordSet", "RecordSet");
	РегистрСведений.Вставить("InformationRegisterRecordKey", "RecordKey");
	РегистрСведений.Вставить("InformationRegisterRecordManager", "RecordManager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрСведений, РегистрСведений);	
		
	Отчет = Новый Структура;
	Отчет.Вставить("ReportObject", "Object");
	Отчет.Вставить("ReportManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.Отчет, Отчет);
	
	ПараметрСеанса = Новый Структура;
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ПараметрСеанса, ПараметрСеанса);
	
	Подсистема = Новый Структура;
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.Подсистема, Подсистема);
	
	Задача = Новый Структура;
	Задача.Вставить("TaskObject", "Object");
	Задача.Вставить("TaskRef", "Ref");
	Задача.Вставить("TaskSelection", "Selection");
	Задача.Вставить("TaskList", "List");
	Задача.Вставить("TaskManager", "Manager");
	МетаданныеОбъектов.Вставить(Перечисления.гпр_ВидыМетаданных.ЗадачаИсполнителя, Задача);
	
	Результат = МетаданныеОбъектов.Получить(ВидОбъекта);
	Если Результат = Неопределено Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОсновныеСвойстваОбъекта(Знач ДокументDOM, ИмяСвойства)
	
	Свойства = ДокументDOM.СоздатьЭлемент("Properties");
	НовыйЭлемент = ДокументDOM.СоздатьЭлемент("Name");
	НовыйЭлемент.ТекстовоеСодержимое = ИмяСвойства;
	ЭлементКомментарий = ДокументDOM.СоздатьЭлемент("Comment");
	ПринадлежностьОбъекта = ДокументDOM.СоздатьЭлемент("ObjectBelonging");
	ПринадлежностьОбъекта.ТекстовоеСодержимое = "Adopted";
	Свойства.ДобавитьДочерний(НовыйЭлемент);
	Свойства.ДобавитьДочерний(ЭлементКомментарий);
	Свойства.ДобавитьДочерний(ПринадлежностьОбъекта);
	Возврат Свойства;
	
КонецФункции 

Процедура ДополнитьЭлементамиОбъекта(Знач ДокументDOM, Объект, ЭлементыОбъекта)
	
	Если Объект.ВидОбъекта = Перечисления.гпр_ВидыМетаданных.Подсистема Тогда
		ДополнитьПодчиненнымиПодсистемами(ДокументDOM, Объект, ЭлементыОбъекта);
		Возврат;
	КонецЕсли; 
	
	ЭлементыСвойстваОбъекта = ЭлементыОбъектаПоВиду(Объект.ВидОбъекта);
	
	Если ЭлементыСвойстваОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВидаОбъекта = Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданных(Объект.ВидОбъекта);
	ИмяВидаОбъектаЛатиницей = Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданныхДляРасширения(Объект.ВидОбъекта);
	
	ОписаниеСтандартногоРеквизита = гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыСтандартныеРеквизиты();
	ОписаниеСтандартнойТабличнойЧасти = гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыСтандартныеТабличныеЧасти();
	
	Для Каждого ЭлементОбъекта Из ЭлементыСвойстваОбъекта Цикл
		
		ПредставлениеТипаРеквизита = Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(ЭлементОбъекта);
		ИмяСвойства = Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяГруппыРеквизитовПоТипу(ЭлементОбъекта);
		МетаданныеСвойства = Метаданные[ИмяВидаОбъекта][Объект.Объект][ИмяСвойства];
		
		Для Каждого ТекущееСвойство Из МетаданныеСвойства Цикл
			
			Если 
				ЭлементОбъекта <> ОписаниеСтандартногоРеквизита.ТипРеквизита
				И ЭлементОбъекта <> ОписаниеСтандартнойТабличнойЧасти.ТипРеквизита
				И ТекущееСвойство.РасширениеКонфигурации() <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЭлементОбъекта = Перечисления.гпр_ТипыРеквизитовОбъекта.ТабличнаяЧасть
				ИЛИ ЭлементОбъекта = Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартнаяТабличнаяЧасть Тогда
				ИмяРеквизита = СтрРазделить(ТекущееСвойство.ПолноеИмя(), ".", Ложь);
				ТабличнаяЧастьОбъекта = ДокументDOM.СоздатьЭлемент(ПредставлениеТипаРеквизита);
				ИнфоТабличнойЧасти = ДокументDOM.СоздатьЭлемент("InternalInfo");
				ИнфоТабличнойЧастиПодчиненный = ДокументDOM.СоздатьЭлемент("xr:GeneratedType");
				ИнфоТабличнойЧастиПодчиненный.УстановитьАтрибут(
					"name",
					СтрШаблон(
						"%1%2.%3.%4",
						ИмяВидаОбъектаЛатиницей,
						ПредставлениеТипаРеквизита,
						ИмяРеквизита[1],
						ИмяРеквизита[3]));
				ИнфоТабличнойЧастиПодчиненный.УстановитьАтрибут("category", "TabularSection");
				ТипИнформации = ДокументDOM.СоздатьЭлемент("xr:TypeId");
				ТипИнформации.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор());
				ИнфоТабличнойЧастиПодчиненный.ДобавитьДочерний(ТипИнформации);
				ЗначениеИнформации = ДокументDOM.СоздатьЭлемент("xr:ValueId");
				ЗначениеИнформации.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор());
				ИнфоТабличнойЧастиПодчиненный.ДобавитьДочерний(ЗначениеИнформации);
				ИнфоТабличнойЧасти.ДобавитьДочерний(ИнфоТабличнойЧастиПодчиненный);
				
				ИнфоТабличнойЧастиПодчиненный = ДокументDOM.СоздатьЭлемент("xr:GeneratedType");
				ИнфоТабличнойЧастиПодчиненный.УстановитьАтрибут(
					"name",
					СтрШаблон(
						"%1%2Row.%3.%4",
						ИмяВидаОбъектаЛатиницей,
						ПредставлениеТипаРеквизита,
						ИмяРеквизита[1],
						ИмяРеквизита[3]));
				ИнфоТабличнойЧастиПодчиненный.УстановитьАтрибут("category", "TabularSectionRow");
				ТипИнформации = ДокументDOM.СоздатьЭлемент("xr:TypeId");
				ТипИнформации.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор());
				ИнфоТабличнойЧастиПодчиненный.ДобавитьДочерний(ТипИнформации);
				ЗначениеИнформации = ДокументDOM.СоздатьЭлемент("xr:ValueId");
				ЗначениеИнформации.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор());
				ИнфоТабличнойЧастиПодчиненный.ДобавитьДочерний(ЗначениеИнформации);
				ИнфоТабличнойЧасти.ДобавитьДочерний(ИнфоТабличнойЧастиПодчиненный);
				
				
				ТабличнаяЧастьОбъекта.ДобавитьДочерний(ИнфоТабличнойЧасти);
				ЗаполнитьУникальныйИдентификаторОбъекта(ДокументDOM, ТабличнаяЧастьОбъекта);
				СвойстваОбъекта = ОсновныеСвойстваОбъекта(ДокументDOM, ИмяРеквизита[3]);
				ТабличнаяЧастьОбъекта.ДобавитьДочерний(СвойстваОбъекта);
				ПредставлениеТипаРеквизитаТЧ = Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
					Перечисления.гпр_ТипыРеквизитовОбъекта.РеквизитТабличнойЧасти);
				РеквизитыТабличнойЧасти = ДокументDOM.СоздатьЭлемент("ChildObjects");
				МетаданныеТабличнойЧасти = Метаданные[ИмяВидаОбъекта][Объект.Объект][ИмяСвойства][ТекущееСвойство.Имя]["Реквизиты"];
				Для Каждого ТекущийРеквизит Из МетаданныеТабличнойЧасти Цикл
					
					Если ТекущийРеквизит.РасширениеКонфигурации() <> Неопределено Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					РеквизитТЧ = ДокументDOM.СоздатьЭлемент(ПредставлениеТипаРеквизитаТЧ);
					ЗаполнитьУникальныйИдентификаторОбъекта(ДокументDOM, РеквизитТЧ);
					ИмяРеквизита = СтрРазделить(ТекущийРеквизит.ПолноеИмя(), ".", Ложь);
					СвойстваРеквизитаТЧ = ОсновныеСвойстваОбъекта(ДокументDOM, ИмяРеквизита[5]);
					РеквизитТЧ.ДобавитьДочерний(СвойстваРеквизитаТЧ);
					РеквизитыТабличнойЧасти.ДобавитьДочерний(РеквизитТЧ);
				КонецЦикла;
				ТабличнаяЧастьОбъекта.ДобавитьДочерний(РеквизитыТабличнойЧасти);
				ЭлементыОбъекта.ДобавитьДочерний(ТабличнаяЧастьОбъекта);
				Продолжить;
			КонецЕсли;
			
			РеквизитОбъекта = ДокументDOM.СоздатьЭлемент(ПредставлениеТипаРеквизита);
			ЗаполнитьУникальныйИдентификаторОбъекта(ДокументDOM, РеквизитОбъекта);
			ИмяРеквизита = СтрРазделить(ТекущееСвойство.ПолноеИмя(), ".", Ложь);
			СвойстваОбъекта = ОсновныеСвойстваОбъекта(ДокументDOM, ИмяРеквизита[3]);
			РеквизитОбъекта.ДобавитьДочерний(СвойстваОбъекта);
			ЭлементыОбъекта.ДобавитьДочерний(РеквизитОбъекта);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПодчиненнымиПодсистемами(ДокументDOM, Объект, ЭлементыОбъекта)
	
	МетаданныеПодсисетемы = Метаданные.НайтиПоПолномуИмени(Объект.ПолноеИмя);
	ИмяОбъекта = Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданныхДляРасширения(Объект.ВидОбъекта);
	Для Каждого Подсистема Из МетаданныеПодсисетемы.Подсистемы Цикл
		ПодчиненнаяПодсистема = ДокументDOM.СоздатьЭлемент(ИмяОбъекта);
		ИмяПодсистемы = СтрРазделить(Подсистема.ПолноеИмя(), ".", Ложь);
		ПодчиненнаяПодсистема.ТекстовоеСодержимое = ИмяПодсистемы.Получить(ИмяПодсистемы.ВГраница());
		ЭлементыОбъекта.ДобавитьДочерний(ПодчиненнаяПодсистема);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлементыОбъектаПоВиду(ВидОбъекта)
	
	РеквизитыОбъекта = Новый Соответствие();
	
	ЭлементыСправочника = Новый Массив;
	ЭлементыСправочника.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыСправочника.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	ЭлементыСправочника.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.ТабличнаяЧасть);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.Справочник, ЭлементыСправочника);
	
	ЭлементыБизнесПроцесса = Новый Массив;
	ЭлементыБизнесПроцесса.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыБизнесПроцесса.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.БизнесПроцесс, ЭлементыБизнесПроцесса);
	
	ЭлементыДокумента = Новый Массив;
	ЭлементыДокумента.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыДокумента.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	ЭлементыДокумента.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.ТабличнаяЧасть);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.Документ, ЭлементыДокумента);
	
	ЭлементыЖурналДокументов = Новый Массив;
	ЭлементыЖурналДокументов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.ЖурналДокументов, ЭлементыЖурналДокументов);
	
	ЭлементыЗадача = Новый Массив;
	ЭлементыЗадача.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыЗадача.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	ЭлементыЗадача.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.РеквизитАдресации);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.ЗадачаИсполнителя, ЭлементыЗадача);
	
	ЭлементыОбработки = Новый Массив;
	ЭлементыОбработки.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыОбработки.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.Обработка, ЭлементыОбработки);
	
	ЭлементыОтчета = Новый Массив;
	ЭлементыОтчета.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыОтчета.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.Отчет, ЭлементыОтчета);
	
	ЭлементыПланВидов = Новый Массив;
	ЭлементыПланВидов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыПланВидов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовХарактеристик, ЭлементыПланВидов);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.ПланОбмена, ЭлементыПланВидов);
	
	ЭлементыПланВидовРасчета = Новый Массив;
	ЭлементыПланВидовРасчета.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыПланВидовРасчета.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовРасчета, ЭлементыПланВидовРасчета);	
	
	ЭлементыПланСчетов = Новый Массив;
	ЭлементыПланСчетов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыПланСчетов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	ЭлементыПланСчетов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.ПризнакУчета);
	ЭлементыПланСчетов.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.ПризнакУчетаСубконто);	
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.ПланСчетов, ЭлементыПланСчетов);
	
	ЭлементыРегистра = Новый Массив;
	ЭлементыРегистра.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
	ЭлементыРегистра.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	ЭлементыРегистра.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Измерение);
	ЭлементыРегистра.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Ресурс);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрБухгалтерии, ЭлементыРегистра);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрСведений, ЭлементыРегистра);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрРасчета, ЭлементыРегистра);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрНакоплений, ЭлементыРегистра);
	
	ЭлементыФильтра = Новый Массив;
	ЭлементыФильтра.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда);
	РеквизитыОбъекта.Вставить(Перечисления.гпр_ВидыМетаданных.КритерийОтбора, ЭлементыФильтра);
	
	Возврат РеквизитыОбъекта.Получить(ВидОбъекта);
	
КонецФункции

Процедура ДополнитьРасширениеРолями(КаталогРасширения)
	
	// Расширение файла ролями
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогРасширения + "Configuration.xml");
	DOMBuilder = New DOMBuilder;
	DOMДокумент = DOMBuilder.Прочитать(ЧтениеXML);
	ЧтениеXML.Close();
	ЭлементыDOM = DOMДокумент.ПолучитьЭлементыПоИмени("ChildObjects");
	
	// Получим шаблоны для формирования ролей
	ШаблонТекстаРоли = ШаблонТекстаФайлаРоли();
	
	// Описание прав доступа
	ШаблонРоли = ПолучитьОбщийМакет("гпр_ШаблонРоли").ОткрытьПотокДляЧтения();
	Архив = Новый ЧтениеZipФайла(ШаблонРоли);
	Архив.ИзвлечьВсе(КаталогРасширения);
	Архив.Закрыть();
	ШаблонРоли.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(КаталогРасширения + "Rights.xml", КодировкаТекста.UTF8);
	ТекстШаблона = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ШаблонРоли = ДетализироватьXMLЧерезФабрикуXDTO(ТекстШаблона);
	ШаблонРоли.version = ВерсияФорматаВыгрузкиКонфигурации();
	
	// Куда записывать роли
	КаталогРолей = КаталогРасширения + "Roles\";
	СоздатьКаталог(КаталогРолей);
	
	// Получаем запросом роли
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияРолей();
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРолей = ПакетЗапроса[0].Выбрать();
	ВыборкаПравДоступаРолей = ПакетЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПодсистемыРолей = ПакетЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОграничеченияПравДоступа = ПакетЗапроса[3].Выгрузить();
	ВыборкаОграничеченияПравДоступа.Индексы.Добавить("Ссылка, ИдентификаторСтроки");
	ВыборкаШаблоныОграничений = ПакетЗапроса[4].Выбрать();
	
	// Запишем роли
	Пока ВыборкаРолей.Следующий() Цикл
		
		// Добавим файл роли
		ТекстРоли = СтрШаблон(ШаблонТекстаРоли,
			ВыборкаРолей.ИдентификаторРоли,
			ВыборкаРолей.ИмяРолиВКонфигурации,
			ВыборкаРолей.Синоним);
		
		Если НЕ ПустаяСтрока(ВыборкаРолей.Комментарий) Тогда
			КомментарийКРоли = СтрШаблон("<Comment>%1</Comment>", ВыборкаРолей.Комментарий);
			ТекстРоли = СтрЗаменить(ТекстРоли, "<Comment/>", КомментарийКРоли);
		КонецЕсли;
		
		ЗаписьТекста = Новый ЗаписьТекста(КаталогРолей + ВыборкаРолей.ИмяРолиВКонфигурации + ".xml", КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстРоли);
		ЗаписьТекста.Закрыть();
		
		// Заполним состав роли, права доступа
		ШаблонРоли.Object.Очистить();
		ШаблонРоли.restrictionTemplate.Очистить();
		
		ШаблонРоли.setForAttributesByDefault = ВыборкаРолей.УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию;
		ШаблонРоли.setForNewObjects = ВыборкаРолей.УстанавливатьПраваДляНовыхОбъектов;
		ШаблонРоли.independentRightsOfChildObjects = ВыборкаРолей.НезависимыеПраваПодчиненныхОбъектов;
		
		ПоискПравДоступа = Новый Структура("Ссылка", ВыборкаРолей.Ссылка);
		Пока ВыборкаПравДоступаРолей.НайтиСледующий(ПоискПравДоступа) Цикл
			
			ДанныеПравДоступаОбъекта = Новый Соответствие();
			
			ВыборкаПравДоступаПоВидам = ВыборкаПравДоступаРолей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПравДоступаПоВидам.Следующий() Цикл
				
				ВыборкаПравДоступаОбъектам = ВыборкаПравДоступаПоВидам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПравДоступаОбъектам.Следующий() Цикл
					
					ДанныеПравДоступаОбъекта.Очистить();
						
					Если ВыборкаПравДоступаОбъектам.ВидОбъекта = Перечисления.гпр_ВидыМетаданных.Подсистема Тогда
						ПолноеИмяОбъекта = СтрЗаменить(ВыборкаПравДоступаОбъектам.ИмяОбъекта, ".", ".Подсистема.");
						ПолноеИмяОбъекта = "Подсистема." + ПолноеИмяОбъекта;
					Иначе
						ПолноеИмяОбъекта = СтрШаблон(
							"%1.%2", 
							Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданных(ВыборкаПравДоступаОбъектам.ВидОбъекта),
							ВыборкаПравДоступаОбъектам.ИмяОбъекта);
					КонецЕсли;
					
					Если Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) = Неопределено Тогда
						Продолжить;	
					КонецЕсли;
					
					// Получим структуру объекта
					СтруктураОбъекта = ОписаниеОбъекта(ВыборкаПравДоступаОбъектам.ВидОбъекта, ВыборкаПравДоступаОбъектам.ИмяОбъекта);
					
					ВыборкаПравДоступаОбъекта = ВыборкаПравДоступаОбъектам.Выбрать();
					
					Пока ВыборкаПравДоступаОбъекта.Следующий() Цикл
						
						Если ВыборкаРолей.УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию 
							И ЗначениеЗаполнено(ВыборкаПравДоступаОбъекта.ИмяРеквизита) тогда
							СтруктураОтбора = Новый Структура();
							СтруктураОтбора.Вставить("ТипРеквизита");
							СтруктураОтбора.Вставить("ИмяРеквизита");
							СтруктураОтбора.Вставить("ИмяРеквизитаТабличнойЧасти");
							СтруктураОтбора.Вставить("ПравоДоступа");
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаПравДоступаОбъекта);
							НайденныеРеквизиты = СтруктураОбъекта.НайтиСтроки(СтруктураОтбора);
							
							// Проверим, что такой реквизит существует
							Если НайденныеРеквизиты.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							// Если нашли эти реквизиты, то уберем его для записи в файл
							Для Каждого РеквизитОбъекта Из 	НайденныеРеквизиты Цикл
								РеквизитОбъекта.ПравоУстановлено = Истина;
							КонецЦикла;
							//Продолжить;
						КонецЕсли;
						
						ЗаполнитьПраваДоступаОбъекта(
							ВыборкаПравДоступаОбъекта.ВидОбъекта,
							ВыборкаПравДоступаОбъекта.ИмяОбъекта,
							ВыборкаПравДоступаОбъекта,
							ДанныеПравДоступаОбъекта);
						
					КонецЦикла;
					
					Если ВыборкаРолей.УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию Тогда
						// Установим признаки для реквизитов без прав доступа
						Для Каждого ТекущееНеиспользуемоеПраво Из СтруктураОбъекта Цикл
							
							Если ТекущееНеиспользуемоеПраво.ПравоУстановлено Тогда
								Продолжить;
							КонецЕсли;
							
							ЗаполнитьПраваДоступаОбъекта(
								ВыборкаПравДоступаОбъектам.ВидОбъекта,
								ВыборкаПравДоступаОбъектам.ИмяОбъекта,
								ТекущееНеиспользуемоеПраво,
								ДанныеПравДоступаОбъекта,
								Ложь);
							
						КонецЦикла;
					КонецЕсли;
					
					// занесем все изменения в файл
					ДополнитьРольПравамиДоступа(
						ВыборкаРолей.Ссылка,
						ШаблонРоли,
						ДанныеПравДоступаОбъекта,
						ВыборкаОграничеченияПравДоступа,
						СтруктураОбъекта,
						ВыборкаПравДоступаОбъектам.ВидОбъекта
					);
						
				КонецЦикла;
				
			КонецЦикла;
			
			// Укажем шаблоны ограничений доступа
			ДополнитьРольШаблонамиДоступа(ВыборкаРолей.Ссылка, ШаблонРоли, ВыборкаШаблоныОграничений);
			
			СоздатьКаталог(КаталогРолей + ВыборкаРолей.ИмяРолиВКонфигурации + "\Ext");
			
			ЗаписьXML = Новый ЗаписьXML;
			ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML;
			ЗаписьXML.ОткрытьФайл(КаталогРолей + ВыборкаРолей.ИмяРолиВКонфигурации + "\Ext\Rights.xml",
			ПараметрыЗаписиXML);
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ШаблонРоли);
			ЗаписьXML.Закрыть();
			
			Объект = DOMДокумент.СоздатьЭлемент("Role");
			Объект.ТекстовоеСодержимое = ВыборкаРолей.ИмяРолиВКонфигурации;
			ЭлементыDOM[0].ДобавитьДочерний(Объект);
			
			ДанныеПравДоступаОбъекта.Очистить();
			
		КонецЦикла;
		ВыборкаПравДоступаРолей.Сбросить();
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогРасширения + "Configuration.xml");
	СохранениеDOM = Новый ЗаписьDOM;
	СохранениеDOM.Записать(DOMДокумент, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	
	Пока ВыборкаПодсистемыРолей.Следующий() Цикл
		
		ПодсистемаРедактирования = Прав(ВыборкаПодсистемыРолей.Подсистема, СтрДлина(ВыборкаПодсистемыРолей.Подсистема) - 11);
		ПодсистемаРедактирования = 	СтрЗаменить(ПодсистемаРедактирования, ".Подсистема.", "\Subsystems\");
		ПодсистемаРедактирования = 	СтрЗаменить(ПодсистемаРедактирования, ".", "");
		
		
		ПутьКФайлуПодсистемы = СтрШаблон(
			"%1Subsystems\%2.xml",
			КаталогРасширения,
			ПодсистемаРедактирования);	
			
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлуПодсистемы);
		DOMBuilder = New DOMBuilder;
		DOMДокумент = DOMBuilder.Прочитать(ЧтениеXML);
		ЧтениеXML.Close();
		ЭлементыDOMProperties = DOMДокумент.ПолучитьЭлементыПоИмени("Properties");
		ЭлементыDOM = DOMДокумент.СоздатьЭлемент("Content");
		ЭлементыDOMProperties[0].ДобавитьДочерний(ЭлементыDOM);
		
		ВыборкаРолей = ВыборкаПодсистемыРолей.Выбрать();
		
		Пока ВыборкаРолей.Следующий() Цикл
			РольПодсистемы = DOMДокумент.СоздатьЭлемент("xr:Item");
			РольПодсистемы.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance","xsi:type","xr:MDObjectRef");
			РольПодсистемы.ТекстовоеСодержимое="Role."+СокрЛП(ВыборкаРолей.Роль);
			ЭлементыDOM.ДобавитьДочерний(РольПодсистемы);			
		КонецЦикла;		
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьКФайлуПодсистемы);
		СохранениеDOM = Новый ЗаписьDOM;
		СохранениеDOM.Записать(DOMДокумент, ЗаписьXML);
		ЗаписьXML.Закрыть();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПолученияРолей()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	гпр_Роли.ИмяРолиВКонфигурации КАК ИмяРолиВКонфигурации,
	|	гпр_Роли.Наименование КАК Синоним,
	|	гпр_Роли.Комментарий КАК Комментарий,
	|	гпр_Роли.УстанавливатьПраваДляНовыхОбъектов КАК УстанавливатьПраваДляНовыхОбъектов,
	|	гпр_Роли.УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию КАК УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию,
	|	гпр_Роли.НезависимыеПраваПодчиненныхОбъектов КАК НезависимыеПраваПодчиненныхОбъектов,
	|	гпр_Роли.ИдентификаторРоли КАК ИдентификаторРоли,
	|	гпр_Роли.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гпр_Роли КАК гпр_Роли
	|ГДЕ
	|	НЕ гпр_Роли.ПометкаУдаления
	|	И НЕ гпр_Роли.ЭтоГруппа
	|	И гпр_Роли.Статус В (ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.Актуальна), ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гпр_РолиПраваДоступа.Ссылка КАК Ссылка,
	|	гпр_РолиПраваДоступа.ВидОбъекта КАК ВидОбъекта,
	|	гпр_РолиПраваДоступа.ИмяОбъекта КАК ИмяОбъекта,
	|	гпр_РолиПраваДоступа.ТипРеквизита КАК ТипРеквизита,
	|	гпр_РолиПраваДоступа.ИмяРеквизита КАК ИмяРеквизита,
	|	гпр_РолиПраваДоступа.ИмяРеквизитаТабличнойЧасти КАК ИмяРеквизитаТабличнойЧасти,
	|	гпр_РолиПраваДоступа.ПравоДоступа КАК ПравоДоступа,
	|	гпр_РолиПраваДоступа.ЗначениеПраваДоступа КАК ЗначениеПраваДоступа,
	|	гпр_РолиПраваДоступа.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Справочник.гпр_Роли.ПраваДоступа КАК гпр_РолиПраваДоступа
	|ГДЕ
	|	НЕ гпр_РолиПраваДоступа.Ссылка.ПометкаУдаления
	|	И НЕ гпр_РолиПраваДоступа.Ссылка.ЭтоГруппа
	|	И гпр_РолиПраваДоступа.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.Актуальна), ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.ПустаяСсылка))
	|	И гпр_РолиПраваДоступа.ПравоДоступа <> ЗНАЧЕНИЕ(Перечисление.гпр_ПраваДоступа.ПустаяСсылка)
	|	И НЕ(гпр_РолиПраваДоступа.ТипРеквизита <> ЗНАЧЕНИЕ(Перечисление.гпр_ТипыРеквизитовОбъекта.ПустаяСсылка)
	|				И гпр_РолиПраваДоступа.ИмяРеквизита = """")
	|ИТОГИ ПО
	|	Ссылка,
	|	ВидОбъекта,
	|	ИмяОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гпр_РолиПодсистемы.Подсистема КАК Подсистема,
	|	гпр_РолиПодсистемы.Ссылка.ИдентификаторРоли КАК ИдентификаторРоли,
	|	гпр_РолиПодсистемы.Ссылка.ИмяРолиВКонфигурации КАК Роль
	|ИЗ
	|	Справочник.гпр_Роли.Подсистемы КАК гпр_РолиПодсистемы
	|ГДЕ
	|	НЕ гпр_РолиПодсистемы.Ссылка.ПометкаУдаления
	|	И гпр_РолиПодсистемы.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.Актуальна), ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.ПустаяСсылка))
	|	И НЕ гпр_РолиПодсистемы.Ссылка.ЭтоГруппа
	|ИТОГИ ПО
	|	Подсистема
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гпр_РолиОграниченияДоступаКДанным.Ссылка КАК Ссылка,
	|	гпр_РолиОграниченияДоступаКДанным.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	гпр_РолиОграниченияДоступаКДанным.Поля КАК Поля,
	|	гпр_РолиОграниченияДоступаКДанным.ОграничениеДоступа КАК ОграничениеДоступа
	|ИЗ
	|	Справочник.гпр_Роли.ОграниченияДоступаКДанным КАК гпр_РолиОграниченияДоступаКДанным
	|ГДЕ
	|	НЕ гпр_РолиОграниченияДоступаКДанным.Ссылка.ПометкаУдаления
	|	И НЕ гпр_РолиОграниченияДоступаКДанным.Ссылка.ЭтоГруппа
	|	И гпр_РолиОграниченияДоступаКДанным.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.Актуальна), ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гпр_РолиШаблоныОграниченийДоступа.ИмяШаблона КАК ИмяШаблона,
	|	гпр_РолиШаблоныОграниченийДоступа.ШаблонОграничения.ТекстШаблона КАК ТекстШаблона,
	|	гпр_РолиШаблоныОграниченийДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гпр_Роли.ШаблоныОграниченийДоступа КАК гпр_РолиШаблоныОграниченийДоступа
	|ГДЕ
	|	НЕ гпр_РолиШаблоныОграниченийДоступа.Ссылка.ПометкаУдаления
	|	И НЕ гпр_РолиШаблоныОграниченийДоступа.Ссылка.ЭтоГруппа
	|	И гпр_РолиШаблоныОграниченийДоступа.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.Актуальна), ЗНАЧЕНИЕ(Перечисление.гпр_СтатусыРоли.ПустаяСсылка))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонТекстаФайлаРоли()
	
	ШаблонТекстаРоли = ПолучитьОбщийМакет("гпр_ТекстРоли").ПолучитьТекст();
	ШаблонТекстаРоли = СтрЗаменить(ШаблонТекстаРоли, "%НомераВерсии%", ВерсияФорматаВыгрузкиКонфигурации());
	
	Возврат ШаблонТекстаРоли;
	
КонецФункции

Функция ДетализироватьXMLЧерезФабрикуXDTO(Текст)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(Текст);
	Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	Возврат Результат;
	
КонецФункции

Процедура УстановитьРасширениеВБазу(ДанныеРасширения, ИмяРасширения)
	
	ПоискРасширения = Новый Структура("Имя", ИмяРасширения);
	НайденныеРасширения = РасширенияКонфигурации.Получить(ПоискРасширения);
	
	Если НайденныеРасширения.Количество() > 0 Тогда
		НайденноеРасширение = НайденныеРасширения[0];
	Иначе
		НайденноеРасширение = РасширенияКонфигурации.Создать();
		НайденноеРасширение.Активно = Истина;
		НайденноеРасширение.БезопасныйРежим = Ложь;
	КонецЕсли;
	
	ТипЗащиты = "ОписаниеЗащитыОтОпасныхДействий";
	ЗащитаРасширения = Новый(ТипЗащиты);
	ЗащитаРасширения.ПредупреждатьОбОпасныхДействиях = Ложь;
	НайденноеРасширение.ЗащитаОтОпасныхДействий = ЗащитаРасширения;
	НайденноеРасширение.Записать(ДанныеРасширения);
	
КонецПроцедуры

Функция ИмяПравоДоступаДляВыгрузки(ПравоДоступа)
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ИменаПравоДоступаДляВыгрузки().Получить(ПравоДоступа);
	
КонецФункции

Процедура ЗаполнитьПраваДоступаОбъекта(
		ВидОбъекта,
		ИмяОбъекта,
		ДанныеПраваДоступа,
		ДанныеПравДоступаОбъекта,
		ЗначениеПраваДоступа = Неопределено)
	
	// Опеределить имя реквизита и право доступа
	ИмяВидаОбъекта = Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданныхДляРасширения(ВидОбъекта);
	СоставИмениПраваДоступа = Новый Массив;        
	Если ВидОбъекта = Перечисления.гпр_ВидыМетаданных.Подсистема Тогда
		ЧастиИмениОбъекта = СтрРазделить(ИмяОбъекта, ".", Ложь);
		Для Каждого ЧастьИмениОбъекта Из ЧастиИмениОбъекта Цикл
			СоставИмениПраваДоступа.Добавить(ИмяВидаОбъекта);
			СоставИмениПраваДоступа.Добавить(ЧастьИмениОбъекта);
		КонецЦикла;
	Иначе
		СоставИмениПраваДоступа.Добавить(ИмяВидаОбъекта);
		СоставИмениПраваДоступа.Добавить(ИмяОбъекта);
	КонецЕсли;
	ДляОграничения = Истина;
	Если ЗначениеЗаполнено(ДанныеПраваДоступа.ИмяРеквизита) Тогда
		Если ДанныеПраваДоступа.ТипРеквизита = Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартныйРеквизит Тогда
			
			Если ЗначениеЗаполнено(ДанныеПраваДоступа.ИмяРеквизитаТабличнойЧасти) Тогда
				
				СоставИмениПраваДоступа.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
	    								Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартнаяТабличнаяЧасть));
				
			Иначе
				
				СоставИмениПраваДоступа.Добавить(Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
	    								ДанныеПраваДоступа.ТипРеквизита));
			КонецЕсли;
			
			
			СоставИмениПраваДоступа.Добавить(ИмяСтандартногоРеквизита(ДанныеПраваДоступа.ИмяРеквизита));
		Иначе
			СоставИмениПраваДоступа.Добавить(
				?(ДанныеПраваДоступа.ТипРеквизита = Перечисления.гпр_ТипыРеквизитовОбъекта.РеквизитТабличнойЧасти,
						 Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
	    								Перечисления.гпр_ТипыРеквизитовОбъекта.ТабличнаяЧасть),
	    							Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
	    								ДанныеПраваДоступа.ТипРеквизита)));
	    	Если ДанныеПраваДоступа.ТипРеквизита = Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартнаяТабличнаяЧасть Тогда
				СоставИмениПраваДоступа.Добавить(
    									ИмяСтандартногоРеквизита(ДанныеПраваДоступа.ИмяРеквизита));
	    		
	    	Иначе			
				СоставИмениПраваДоступа.Добавить(
    									ДанныеПраваДоступа.ИмяРеквизита);
    		КонецЕсли;
		КонецЕсли;
		ДляОграничения = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПраваДоступа.ИмяРеквизитаТабличнойЧасти) Тогда
		Если ДанныеПраваДоступа.ТипРеквизита = Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартныйРеквизит Тогда
			СоставИмениПраваДоступа.Добавить(
	    							Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
	    								Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартныйРеквизит));
			СоставИмениПраваДоступа.Добавить(
	    							ИмяСтандартногоРеквизита(ДанныеПраваДоступа.ИмяРеквизитаТабличнойЧасти));
		Иначе
			СоставИмениПраваДоступа.Добавить(
	    							Перечисления.гпр_ТипыРеквизитовОбъекта.ИмяРеквизитовПоТипуРасширения(
	    								Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит));
			СоставИмениПраваДоступа.Добавить(
	    							ДанныеПраваДоступа.ИмяРеквизитаТабличнойЧасти);
    	КонецЕсли;
	КонецЕсли;
	ИмяОбъектаПравДоступа = СтрСоединить(СоставИмениПраваДоступа, ".");

	Если ДанныеПравДоступаОбъекта.Получить(ИмяОбъектаПравДоступа) = Неопределено Тогда
		СписокПравДоступа = Новый ТаблицаЗначений;
		СписокПравДоступа.Колонки.Добавить("ПравоДоступа", Новый ОписаниеТипов("Строка"));
		СписокПравДоступа.Колонки.Добавить("Значение", Новый ОписаниеТипов("Булево"));
		СписокПравДоступа.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		СписокПравДоступа.Колонки.Добавить("ДляОграничения", Новый ОписаниеТипов("Булево"));
		ДанныеПравДоступаОбъекта.Вставить(ИмяОбъектаПравДоступа, СписокПравДоступа);
	КонецЕсли;

	ДанныеПравДоступа = ДанныеПравДоступаОбъекта.Получить(ИмяОбъектаПравДоступа);
	ПравоДоступа = ИмяПравоДоступаДляВыгрузки(ДанныеПраваДоступа.ПравоДоступа);
	
	// Проверим, что данное право уже есть
	Если ЗначениеПраваДоступа <> Неопределено
		И ДанныеПравДоступа.НайтиСтроки(Новый Структура("ПравоДоступа", ПравоДоступа)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПраваДоступа = ДанныеПравДоступа.Добавить();
	СтрокаПраваДоступа.ПравоДоступа = ПравоДоступа;
	СтрокаПраваДоступа.Значение = ?(
		ЗначениеПраваДоступа = Неопределено,
		ДанныеПраваДоступа.ЗначениеПраваДоступа,
		ЗначениеПраваДоступа);
	СтрокаПраваДоступа.ИдентификаторСтроки = ДанныеПраваДоступа.ИдентификаторСтроки;
	СтрокаПраваДоступа.ДляОграничения = ДляОграничения;
	ДанныеПравДоступаОбъекта.Вставить(ИмяОбъектаПравДоступа, ДанныеПравДоступа);	
	
КонецПроцедуры

Процедура ДополнитьРольПравамиДоступа(
		Роль,
		ШаблонРоли,
		ДанныеПравДоступаОбъекта,
		ОграниченияДоступа,
		ДанныеОбъекта,
		ВидОбъекта)
	
	ВсеПраваДоступаОбъекта = гпр_РаботаСКонфигурациейСервер.ДоступныеВидуОбъектаПраваДоступа(ВидОбъекта);
	НеУстановленныеПраваДоступаОбъекта = Новый Массив;
	
	Для Каждого ПравоОбъекта Из ВсеПраваДоступаОбъекта Цикл
		НеУстановленныеПраваДоступаОбъекта.Добавить(ИмяПравоДоступаДляВыгрузки(ПравоОбъекта.Значение));
	КонецЦикла;
	
	Для Каждого ТекущийОбъект Из ДанныеПравДоступаОбъекта Цикл
		
		ОбъектПрава = ФабрикаXDTO.Создать(ШаблонРоли.object.OwningProperty.Type);
		ОбъектПрава.Name = ТекущийОбъект.Ключ;
		ЭтоПраваОбъекта = СтрРазделить(ТекущийОбъект.Ключ, ".").Количество() = 2;
		
		Для Каждого ТекущееПравоДоступа Из ТекущийОбъект.Значение Цикл
			
			Если ЭтоПраваОбъекта Тогда
				НеУстановленныеПраваДоступаОбъекта.Удалить(
					НеУстановленныеПраваДоступаОбъекта.Найти(ТекущееПравоДоступа.ПравоДоступа));
			КонецЕсли;
			
			ПравоДоступа = ФабрикаXDTO.Создать(ОбъектПрава.right.OwningProperty.Type);
			ПравоДоступа.Name = ТекущееПравоДоступа.ПравоДоступа;
			ПравоДоступа.Value = ?(ТекущееПравоДоступа.Значение, "True", "False");
			
			Если ТекущееПравоДоступа.ДляОграничения Тогда
				
				ПоискОграниченийДоступа = Новый Структура(
					"Ссылка, ИдентификаторСтроки",
					Роль,
					ТекущееПравоДоступа.ИдентификаторСтроки);
				
				СтрокиОграничений = ОграниченияДоступа.НайтиСтроки(ПоискОграниченийДоступа);
				
				Для Каждого СтрокаОграничений Из СтрокиОграничений Цикл
					
					ПраваОграничений = ФабрикаXDTO.Создать(ПравоДоступа.restrictionByCondition.OwningProperty.Type);
					
					// Добавим поля
					ПоляОграничений = СтрЗаменить(СтрокаОграничений.Поля, НСтр("ru='<Прочие поля>'"), "");
					НаборПолейДоступа = СтрРазделить(ПоляОграничений, ",", Ложь);
					
					Для Каждого ТекущееПоле Из НаборПолейДоступа Цикл
						
						Если ТекущееПоле = "ВерсияДанных" Тогда
							ПраваОграничений.field.Добавить("DataVersion");
							Продолжить;
						КонецЕсли; 
						
						// Определим, что это страндартный реквизит. Тогда нужно другое название
						СтруктураПоиска = Новый Структура(
							"ТипРеквизита,ИмяРеквизита",
							Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартныйРеквизит,
							ТекущееПоле);
						Если ДанныеОбъекта.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
							ПраваОграничений.field.Добавить(ИмяСтандартногоРеквизита(ТекущееПоле));
							Продолжить;
						КонецЕсли;
						
						ПоляЗамены = СтрРазделить(ТекущееПоле, ".");
						СтруктураПоиска = Новый Структура(
							"ТипРеквизита,ИмяРеквизита",
							Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартнаяТабличнаяЧасть,
							ПоляЗамены[0]);
						Если ДанныеОбъекта.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
							Для Каждого ТекущийРеквизит Из ПоляЗамены Цикл
								ПоляЗамены.Добавить(ИмяСтандартногоРеквизита(ТекущийРеквизит));
							КонецЦикла;
							ТекущееПоле = СтрСоединить(ПоляЗамены, ".");
							Продолжить;
						КонецЕсли;
						
						// Проверим, что это реквизит табличной части
						ТекущееПоле = СтрЗаменить(ТекущееПоле, ".НомерСтроки", ".LineNumber");
						
						ПраваОграничений.field.Добавить(ТекущееПоле);
					КонецЦикла;
					
					ПраваОграничений.condition = СтрокаОграничений.ОграничениеДоступа;
					ПравоДоступа.restrictionByCondition.Добавить(ПраваОграничений);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОбъектПрава.right.Добавить(ПравоДоступа);
			
		КонецЦикла;
		
		// Дополним файл неустановленными правами доступа
		Если ЭтоПраваОбъекта Тогда
			
			Для Каждого ИмяПраваДоступа Из НеУстановленныеПраваДоступаОбъекта Цикл
				
				ПравоДоступа = ФабрикаXDTO.Создать(ОбъектПрава.right.OwningProperty.Type);
				ПравоДоступа.Name = ИмяПраваДоступа;
				ПравоДоступа.Value = "False";
				ОбъектПрава.right.Добавить(ПравоДоступа);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ШаблонРоли.object.Добавить(ОбъектПрава);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяСтандартногоРеквизита(ИмяРеквизита)
	
	ИмяСтандартногоРеквизитаОбъекта = гпр_РаботаСКонфигурациейСерверПовтИсп.СтандартныеРеквизитыОбъектовДляВыгрузки().Получить(ИмяРеквизита);
	
	Возврат ?(ИмяСтандартногоРеквизитаОбъекта = Неопределено, ИмяРеквизита, ИмяСтандартногоРеквизитаОбъекта);
	
КонецФункции

Процедура ДополнитьРольШаблонамиДоступа(Роль, ШаблонРоли, ШаблоныОграничений)
	
	ПоискШаблоновРоли = Новый Структура("Ссылка", Роль);
	
	Пока ШаблоныОграничений.НайтиСледующий(ПоискШаблоновРоли) Цикл
		
		ОбъектОрганичений = ФабрикаXDTO.Создать(ШаблонРоли.restrictionTemplate.OwningProperty.Type);
		ОбъектОрганичений.name = ШаблоныОграничений.ИмяШаблона;
		ОбъектОрганичений.condition = ШаблоныОграничений.ТекстШаблона;
		ШаблонРоли.restrictionTemplate.Add(ОбъектОрганичений);
		
	КонецЦикла;
	
	ШаблоныОграничений.Сбросить();
	
КонецПроцедуры

Функция НомерВерсииПользовательскихРолей()
	
	НомерВерсии = Константы.гпр_НомерВерсииПользовательскихРолей.Получить();
    ЧастиВерсии = СтрРазделить(НомерВерсии, ".");
   
    Если ЧастиВерсии.Количество() <> 4 Тогда
		
		НомерВерсии = гпр_РаботаСКонфигурациейСервер.НачальныйНомерВерсииРолей();
	
	Иначе
	
	   	ЧастиВерсии[3] = Формат(Число(ЧастиВерсии[3]) + 1, "ЧГ=0;"); 
	   	НомерВерсии = СтрСоединить(ЧастиВерсии, ".");

	КонецЕсли;
		
	Константы.гпр_НомерВерсииПользовательскихРолей.Установить(НомерВерсии); 
	
	Возврат НомерВерсии;
	
КонецФункции

Функция КомандаЗагрузкиРасширенияВБазу(КаталогБазы, ИмяРасширения)
	
	РазделительПутиСервера = ПолучитьРазделительПутиСервера();
	ШаблонКоманды = Новый Массив();
	ШаблонКоманды.Добавить(СтрШаблон("""%1""", ПутьКИсполняемомуФайлу()));
	ШаблонКоманды.Добавить("designer /f");
	ШаблонКоманды.Добавить(КаталогБазы);
	ШаблонКоманды.Добавить("/LoadConfigFromFiles");
	ШаблонКоманды.Добавить(КаталогБазы + РазделительПутиСервера + "ExtensionConfiguration");
	ШаблонКоманды.Добавить("-Extension");
	ШаблонКоманды.Добавить("ИмяРасширения");
	ШаблонКоманды.Добавить("/DumpResult");
	ШаблонКоманды.Добавить(КаталогБазы + РазделительПутиСервера + "Event.log");
	ШаблонКоманды.Добавить("/DisableStartupMessages /DisableStartupDialogs /Out");
	ШаблонКоманды.Добавить(КаталогБазы + РазделительПутиСервера + "Report.txt");
	Возврат СтрСоединить(ШаблонКоманды, " ");
	
КонецФункции

Функция ПутьКИсполняемомуФайлу()
	
	Возврат КаталогПрограммы() + ?(ЭтоWindows(), "1cv8.exe", "1cv8");
	
КонецФункции

Функция ЭтоWindows()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
КонецФункции

Функция КомандаВыгрузкиРасширенияИзБазы(КаталогБазы, ИмяРасширения)
	
	РазделительПутиСервера = ПолучитьРазделительПутиСервера();
	ШаблонКоманды = Новый Массив();
	ШаблонКоманды.Добавить(СтрШаблон("""%1""", ПутьКИсполняемомуФайлу()));
	ШаблонКоманды.Добавить("designer /f");
	ШаблонКоманды.Добавить(КаталогБазы);
	ШаблонКоманды.Добавить("/DumpCfg");
	ШаблонКоманды.Добавить(КаталогБазы + РазделительПутиСервера + ИмяРасширения + ".cfe");
	ШаблонКоманды.Добавить("-Extension");
	ШаблонКоманды.Добавить("ИмяРасширения");
	ШаблонКоманды.Добавить("/DumpResult");
	ШаблонКоманды.Добавить(КаталогБазы + РазделительПутиСервера + "Event.log");
	ШаблонКоманды.Добавить("/DisableStartupMessages /DisableStartupDialogs /Out");
	ШаблонКоманды.Добавить(КаталогБазы + РазделительПутиСервера + "Report.txt");
	Возврат СтрСоединить(ШаблонКоманды, " ");
	
КонецФункции

#КонецОбласти