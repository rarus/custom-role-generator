///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ОбъектыКонфигурации() Экспорт

	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОбъектыКонфигурации();

КонецФункции

Функция ОсновнойПорядокМетаданныхВДереве() Экспорт
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОсновнойПорядокМетаданныхВДереве();
		
КонецФункции

Функция СвойстваОбъекта(ОбъектМетаданных, ПредставлениеОбъекта) Экспорт

	Результат = Новый Структура("Имя,Синоним,Представление");
	Результат.Имя = ОбъектМетаданных.Имя;
	Результат.Синоним = ОбъектМетаданных.Синоним;
	Результат.Представление = СтрШаблон("%1.%2", ПредставлениеОбъекта, Результат.Имя);

	Возврат Результат;

КонецФункции

Функция ПредставлениеМетаданных(ИмяМетаданных) Экспорт

	ПредставлениеМетаданных = Новый Соответствие();
	ПредставлениеМетаданных.Вставить("БизнесПроцессы", НСтр("ru = 'Бизнес процессы'"));
	ПредставлениеМетаданных.Вставить("ВнешниеИсточникиДанных", НСтр("ru = 'Внешние источники данных'"));
	ПредставлениеМетаданных.Вставить("Документы", НСтр("ru = 'Документы'"));
	ПредставлениеМетаданных.Вставить("ЖурналыДокументов", НСтр("ru = 'Журналы документов'"));
	ПредставлениеМетаданных.Вставить("Задачи", НСтр("ru = 'Задачи'"));
	ПредставлениеМетаданных.Вставить("Константы", НСтр("ru = 'Константы'"));
	ПредставлениеМетаданных.Вставить("Обработки", НСтр("ru = 'Обработки'"));
	ПредставлениеМетаданных.Вставить("ОбщиеКоманды", НСтр("ru = 'Общие команды'"));
	ПредставлениеМетаданных.Вставить("ОбщиеФормы", НСтр("ru = 'Общие формы'"));
	ПредставлениеМетаданных.Вставить("Отчеты", НСтр("ru = 'Отчеты'"));
	ПредставлениеМетаданных.Вставить("ПараметрыСеанса", НСтр("ru = 'Параметры сеанса'"));
	ПредставлениеМетаданных.Вставить("ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"));
	ПредставлениеМетаданных.Вставить("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"));
	ПредставлениеМетаданных.Вставить("ПланыОбмена", НСтр("ru = 'Планы обмена'"));
	ПредставлениеМетаданных.Вставить("ПланыСчетов", НСтр("ru = 'Планы счетов'"));
	ПредставлениеМетаданных.Вставить("РегистрыБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"));
	ПредставлениеМетаданных.Вставить("РегистрыНакопления", НСтр("ru = 'Регистры накоплений'"));
	ПредставлениеМетаданных.Вставить("Подсистемы", НСтр("ru = 'Подсистемы'"));
	ПредставлениеМетаданных.Вставить("РегистрыРасчета", НСтр("ru = 'Регистры расчета'"));
	ПредставлениеМетаданных.Вставить("РегистрыСведений", НСтр("ru = 'Регистры сведений'"));
	ПредставлениеМетаданных.Вставить("Справочники", НСтр("ru = 'Справочники'"));
	ПредставлениеМетаданных.Вставить("ОбщиеРеквизиты", НСтр("ru = 'Общие реквизиты'"));
	ПредставлениеМетаданных.Вставить("КритерииОтбора", НСтр("ru = 'Критерии отбора'"));

	Возврат ПредставлениеМетаданных.Получить(ИмяМетаданных);

КонецФункции

// Возвращаемое значение:
//  Структура из КлючИЗначение:
//  * Ключ - Строка -
//  * Значение - ПеречислениеСсылка.гпр_ПраваДоступа -
//
Функция ПраваДоступаПоИменамРеквизитов() Экспорт
	
	ИменаРеквизитовПоПравамДоступа = гпр_РаботаСКонфигурациейСерверПовтИсп.ИменаРеквизитовПоПравамДоступа();
	Результат = Новый Структура();
	
	Для Каждого КлючЗначение Из ИменаРеквизитовПоПравамДоступа Цикл
		
		Результат.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.гпр_ВидыМетаданных -
//  * Значение - Структура -
//
Функция ПраваДоступаПоВидамОбъектов(СОбщимиПравами = Ложь) Экспорт
	
	Результат = Новый Соответствие();
	
	ПраваДоступаДоступныеПоУмолчанию = ПраваДоступаДоступныеПоУмолчанию();
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступаДоступныеПоУмолчанию.Вставить("ОбщееЧтение");
		ПраваДоступаДоступныеПоУмолчанию.Вставить("ОбщееИзменение");
		ПраваДоступаДоступныеПоУмолчанию.Вставить("ОбщееУдаление");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.Справочник, ПраваДоступаДоступныеПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ПланОбмена, ПраваДоступаДоступныеПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовХарактеристик, ПраваДоступаДоступныеПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ПланСчетов, ПраваДоступаДоступныеПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовРасчета, ПраваДоступаДоступныеПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.БизнесПроцесс, ПраваДоступаДоступныеПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ЗадачаИсполнителя, ПраваДоступаДоступныеПоУмолчанию);
	
	ПраваДоступа = ПраваДоступаДоступныеПоУмолчанию();
	ПраваДоступа.Вставить("Проведение", Перечисления.гпр_ПраваДоступа.Проведение);
	ПраваДоступа.Вставить("ИнтерактивноеПроведение", Перечисления.гпр_ПраваДоступа.ИнтерактивноеПроведение);
	ПраваДоступа.Вставить("ИнтерактивноеПроведениеНеОперативное", Перечисления.гпр_ПраваДоступа.ИнтерактивноеПроведениеНеОперативное);
	ПраваДоступа.Вставить("ОтменаПроведения", Перечисления.гпр_ПраваДоступа.ОтменаПроведения);
	ПраваДоступа.Вставить("ИнтерактивнаяОтменаПроведения", Перечисления.гпр_ПраваДоступа.ИнтерактивнаяОтменаПроведения);
	ПраваДоступа.Вставить("ИнтерактивноеИзменениеПроведенных", Перечисления.гпр_ПраваДоступа.ИнтерактивноеИзменениеПроведенных);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		ПраваДоступа.Вставить("ОбщееУдаление");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.Документ, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Изменение", Перечисления.гпр_ПраваДоступа.Изменение);
	ПраваДоступа.Вставить("ИзменениеИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеИсторииДанных);
	ПраваДоступа.Вставить("ИзменениеКомментарияВерсииИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеКомментарияВерсииИсторииДанных);
	ПраваДоступа.Вставить("ИзменениеНастроекИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеНастроекИсторииДанных);
	ПраваДоступа.Вставить("ПереходНаВерсиюИсторииДанных", Перечисления.гпр_ПраваДоступа.ПереходНаВерсиюИсторииДанных);
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	ПраваДоступа.Вставить("ПросмотрИсторииДанных", Перечисления.гпр_ПраваДоступа.ПросмотрИсторииДанных);
	ПраваДоступа.Вставить("Редактирование", Перечисления.гпр_ПраваДоступа.Редактирование);
	ПраваДоступа.Вставить("РедактированияКомментарияВерсииИсторииДанных", Перечисления.гпр_ПраваДоступа.РедактированияКомментарияВерсииИсторииДанных);
	ПраваДоступа.Вставить("Чтение", Перечисления.гпр_ПраваДоступа.Чтение);
	ПраваДоступа.Вставить("ЧтениеИсторииДанных", Перечисления.гпр_ПраваДоступа.ЧтениеИсторииДанных);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.Константа, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.Подсистема, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Получение", Перечисления.гпр_ПраваДоступа.Получение);
	ПраваДоступа.Вставить("Установка", Перечисления.гпр_ПраваДоступа.Установка);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ПараметрСеанса, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	ПраваДоступа.Вставить("Редактирование", Перечисления.гпр_ПраваДоступа.Редактирование);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщийРеквизит, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.КритерийОтбора, ПраваДоступа);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщаяФорма, ПраваДоступа);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщаяКоманда, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Чтение", Перечисления.гпр_ПраваДоступа.Чтение);
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ЖурналДокументов, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Использование", Перечисления.гпр_ПраваДоступа.Использование);
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.Отчет, ПраваДоступа);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.Обработка, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Использование", Перечисления.гпр_ПраваДоступа.Использование);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.ВнешнийИсточникДанных, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Чтение", Перечисления.гпр_ПраваДоступа.Чтение);
	ПраваДоступа.Вставить("Изменение", Перечисления.гпр_ПраваДоступа.Изменение);
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	ПраваДоступа.Вставить("Редактирование", Перечисления.гпр_ПраваДоступа.Редактирование);
	ПраваДоступа.Вставить("УправлениеИтогами", Перечисления.гпр_ПраваДоступа.УправлениеИтогами);
	ПраваДоступа.Вставить("ИзменениеИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеИсторииДанных);
	ПраваДоступа.Вставить("ИзменениеИсторииДанныхОтсутсвующихДанных", Перечисления.гпр_ПраваДоступа.ИзменениеИсторииДанныхОтсутсвующихДанных);
	ПраваДоступа.Вставить("ИзменениеКомментарияВерсииИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеКомментарияВерсииИсторииДанных);
	ПраваДоступа.Вставить("ИзменениеНастроекИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеНастроекИсторииДанных);
	ПраваДоступа.Вставить("ПереходНаВерсиюИсторииДанных", Перечисления.гпр_ПраваДоступа.ПереходНаВерсиюИсторииДанных);
	ПраваДоступа.Вставить("ПросмотрИсторииДанных", Перечисления.гпр_ПраваДоступа.ПросмотрИсторииДанных);
	ПраваДоступа.Вставить("РедактированияКомментарияВерсииИсторииДанных", Перечисления.гпр_ПраваДоступа.РедактированияКомментарияВерсииИсторииДанных);
	ПраваДоступа.Вставить("ЧтениеИсторииДанных", Перечисления.гпр_ПраваДоступа.ЧтениеИсторииДанных);
	ПраваДоступа.Вставить("ЧтениеИсторииДанныхОтсутствующихДанных", Перечисления.гпр_ПраваДоступа.ЧтениеИсторииДанныхОтсутствующихДанных);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрСведений, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Чтение", Перечисления.гпр_ПраваДоступа.Чтение);
	ПраваДоступа.Вставить("Изменение", Перечисления.гпр_ПраваДоступа.Изменение);
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	ПраваДоступа.Вставить("Редактирование", Перечисления.гпр_ПраваДоступа.Редактирование);
	ПраваДоступа.Вставить("УправлениеИтогами", Перечисления.гпр_ПраваДоступа.УправлениеИтогами);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрБухгалтерии, ПраваДоступа);
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрНакоплений, ПраваДоступа);
	
	ПраваДоступа = Новый Структура();
	ПраваДоступа.Вставить("Чтение", Перечисления.гпр_ПраваДоступа.Чтение);
	ПраваДоступа.Вставить("Изменение", Перечисления.гпр_ПраваДоступа.Изменение);
	ПраваДоступа.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	ПраваДоступа.Вставить("Редактирование", Перечисления.гпр_ПраваДоступа.Редактирование);
	
	Если СОбщимиПравами Тогда
		
		ПраваДоступа.Вставить("ОбщееЧтение");
		ПраваДоступа.Вставить("ОбщееИзменение");
		
	КонецЕсли;
	
	Результат.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрРасчета, ПраваДоступа);
	Возврат Результат;
	
КонецФункции

// Доступные виду объекта права доступа.
// 
// Параметры:
//  ВидОбъекта - ПеречислениеСсылка.гпр_ВидыМетаданных - Вид объекта
// 
// Возвращаемое значение:
//  Структура
//
Функция ДоступныеВидуОбъектаПраваДоступа(ВидОбъекта) Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат ПраваДоступаПоВидамОбъектов().Получить(ВидОбъекта);
	
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение
//  * Ключ - ПеречислениеСсылка.гпр_ТипыРеквизитовОбъекта -
//  * Значение - Структура -
//
Функция ПраваДоступаПоТипамРеквизитов() Экспорт
	
	ПраваДоступаПоУмолчанию = Новый Структура(
		"Просмотр,Редактирование",
		Перечисления.гпр_ПраваДоступа.Просмотр,
		Перечисления.гпр_ПраваДоступа.Редактирование
	);
	
	Результат = Новый Соответствие();
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит, ПраваДоступаПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.ТабличнаяЧасть, ПраваДоступаПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартныйРеквизит, ПраваДоступаПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.Измерение, ПраваДоступаПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.Ресурс, ПраваДоступаПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.РеквизитТабличнойЧасти, ПраваДоступаПоУмолчанию);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.СтандартнаяТабличнаяЧасть, ПраваДоступаПоУмолчанию);
	
	ПраваДоступаКоманды = Новый Структура("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	Результат.Вставить(Перечисления.гпр_ТипыРеквизитовОбъекта.Команда, ПраваДоступаКоманды);
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТипРеквизита - ПеречислениеСсылка.гпр_ТипыРеквизитовОбъекта - Тип реквизита
// 
// Возвращаемое значение:
//  Структура
//
Функция ДоступныеТипуРеквизитаПраваДоступа(ТипРеквизита) Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат ПраваДоступаПоТипамРеквизитов().Получить(ТипРеквизита);
	
КонецФункции

#Область ДеревоПодсистем

// Возвращаемое значение:
//	ДеревоЗначений - дерево подсистем с колонками:
//	* Подсистема - Строка -
//	* Синоним - Строка - 
//
Функция ПодсистемыКонфигурации() Экспорт
	
	Результат = Новый ДеревоЗначений();
	Результат.Колонки.Добавить("Подсистема", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		
		ЗаполнитьИнфомрациюОПодсистеме(Результат.Строки, Подсистема);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДеревоОбъектовКонфигурации

Функция ДоступныеГруппыПодчиненныхЭлементовПоВидуОбъекта(ВидОбъекта) Экспорт
	
	КоллекцияОписаний = Новый Соответствие();
	
	ЭлементыПоУмолчанию = Новый Массив();
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыТабличныеЧасти());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыКоманды());
	
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Справочник, ЭлементыПоУмолчанию);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Документ, ЭлементыПоУмолчанию);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланОбмена, ЭлементыПоУмолчанию);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовХарактеристик, ЭлементыПоУмолчанию);
	
	// TODO: Расширить перечень подчиненных элементов
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.БизнесПроцесс, ЭлементыПоУмолчанию);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ЗадачаИсполнителя, ЭлементыПоУмолчанию);
	 
	ЭлементыПоУмолчанию = Новый Массив();
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыТабличныеЧасти());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыСтандартныеТабличныеЧасти());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыКоманды());
	 
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланСчетов, ЭлементыПоУмолчанию);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовРасчета, ЭлементыПоУмолчанию);
	
	ТолькоКоманды = Новый Массив();
	ТолькоКоманды.Добавить(ОписаниеГруппыКоманды());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.КритерийОтбора, ТолькоКоманды);
	
	КомандыИСтандартныеРеквизиты = Новый Массив();
	КомандыИСтандартныеРеквизиты.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	КомандыИСтандартныеРеквизиты.Добавить(ОписаниеГруппыКоманды());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ЖурналДокументов, КомандыИСтандартныеРеквизиты);
	
	БезСтандартныхРеквизитов = Новый Массив();
	БезСтандартныхРеквизитов.Добавить(ОписаниеГруппыРеквизиты());
	БезСтандартныхРеквизитов.Добавить(ОписаниеГруппыТабличныеЧасти());
	БезСтандартныхРеквизитов.Добавить(ОписаниеГруппыКоманды());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Отчет, БезСтандартныхРеквизитов);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Обработка, БезСтандартныхРеквизитов);
	
	Регистры = Новый Массив();
	Регистры.Добавить(ОписаниеГруппыИзмерения());
	Регистры.Добавить(ОписаниеГруппыРесурсы());
	Регистры.Добавить(ОписаниеГруппыРеквизиты());
	Регистры.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	Регистры.Добавить(ОписаниеГруппыКоманды());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрСведений, Регистры);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрНакоплений, Регистры);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрБухгалтерии, Регистры);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрРасчета, Регистры);
	
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Константа, Новый Массив());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Подсистема, Новый Массив());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПараметрСеанса, Новый Массив());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщийРеквизит, Новый Массив());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщаяФорма, Новый Массив());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ОбщаяКоманда, Новый Массив());
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ВнешнийИсточникДанных, Новый Массив());
	
	Возврат КоллекцияОписаний.Получить(ВидОбъекта);
	
КонецФункции

#КонецОбласти

#Область Роль

Функция НайденаРольПоИмени(Роль, ИмяРоли) Экспорт

	// Сначала проверим среди ролей расширения
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК НаличиеРоли
	|ИЗ
	|	Справочник.гпр_Роли КАК гпр_Роли
	|ГДЕ
	|	гпр_Роли.ИмяРолиВКонфигурации = &ИмяРолиВКонфигурации
	|	И гпр_Роли.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Роль); 	
	Запрос.УстановитьПараметр("ИмяРолиВКонфигурации", ИмяРоли);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекущаяРоль Из Метаданные.Роли Цикл
		
		Если ТекущаяРоль.РасширениеКонфигурации() <> Неопределено
			И ТекущаяРоль.РасширениеКонфигурации().Имя = "ПользовательскиеРоли" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяРоль.Имя = ИмяРоли Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

Функция НачальныйНомерВерсииРолей() Экспорт
	
	Возврат "1.0.1.1";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоОбъектовКонфигурации

Функция ОписаниеГруппыКоманды()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыКоманды();
	
КонецФункции

Функция ОписаниеГруппыСтандартныеРеквизиты()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыСтандартныеРеквизиты();
	
КонецФункции

Функция ОписаниеГруппыСтандартныеТабличныеЧасти()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыСтандартныеТабличныеЧасти();
	
КонецФункции

Функция ОписаниеГруппыТабличныеЧасти()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыТабличныеЧасти();
	
КонецФункции

Функция ОписаниеГруппыРеквизиты()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыРеквизиты();
	
КонецФункции

Функция ОписаниеГруппыИзмерения()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыИзмерения();
	
КонецФункции

Функция ОписаниеГруппыРесурсы()
	
	Возврат гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыРесурсы();
	
КонецФункции

#КонецОбласти

#Область ДеревоПодсистем

Процедура ЗаполнитьИнфомрациюОПодсистеме(Подсистемы, Подсистема)
	
	Если Подсистема.РасширениеКонфигурации() <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеПодсистемы = Подсистемы.Добавить();
	
	Если ПустаяСтрока(Подсистема.Синоним) Тогда
		
		ОписаниеПодсистемы.Синоним = Подсистема.Имя;
		
	Иначе
		
		ОписаниеПодсистемы.Синоним = Подсистема.Синоним;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подсистемы.Родитель) Тогда
		
		ОписаниеПодсистемы.Подсистема = Подсистемы.Родитель.Подсистема + ".Подсистема." + Подсистема.Имя;
		
	Иначе		
		
		ОписаниеПодсистемы.Подсистема = "Подсистема." + Подсистема.Имя;
		
	КонецЕсли;
	
	Для Каждого Дочка Из Подсистема.Подсистемы Цикл
		
		ЗаполнитьИнфомрациюОПодсистеме(ОписаниеПодсистемы.Строки, Дочка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектамиПодсистемы(СписокПодсистем, ТекущийОбъект, ПредставлениеОбъекта)
	
	ДанныеОбОбъекте = СвойстваОбъекта(ТекущийОбъект, ПредставлениеОбъекта);
	
	НоваяПодсистема = СписокПодсистем.Строки.Добавить();
	НоваяПодсистема.Подсистема = ДанныеОбОбъекте.Представление;
	НоваяПодсистема.Синоним = ДанныеОбОбъекте.Синоним;
	НоваяПодсистема.КартинкаПодсистемы = БиблиотекаКартинок.гпр_Подсистема;
	
	Для Каждого ПодчиненнаяПодсистема Из ТекущийОбъект.Подсистемы Цикл
	
		ЗаполнитьОбъектамиПодсистемы(НоваяПодсистема, ПодчиненнаяПодсистема, ПредставлениеОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ПраваДоступаДоступныеПоУмолчанию()
	
	Результат = Новый Структура();
	Результат.Вставить("ВводПоСтроке", Перечисления.гпр_ПраваДоступа.ВводПоСтроке); 
	Результат.Вставить("Добавление", Перечисления.гпр_ПраваДоступа.Добавление);
	Результат.Вставить("Изменение", Перечисления.гпр_ПраваДоступа.Изменение);
	Результат.Вставить("ИзменениеИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеИсторииДанных);
	Результат.Вставить("ИзменениеИсторииДанныхОтсутсвующихДанных", Перечисления.гпр_ПраваДоступа.ИзменениеИсторииДанныхОтсутсвующихДанных);
	Результат.Вставить("ИзменениеКомментарияВерсииИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеКомментарияВерсииИсторииДанных);
	Результат.Вставить("ИзменениеНастроекИсторииДанных", Перечисления.гпр_ПраваДоступа.ИзменениеНастроекИсторииДанных);
	Результат.Вставить("ИнтерактивноеУдалениеПомеченных", Перечисления.гпр_ПраваДоступа.ИнтерактивноеУдалениеПомеченных);
	Результат.Вставить("ИнтерактивнаяПометкаНаУдаление", Перечисления.гпр_ПраваДоступа.ИнтерактивнаяПометкаУдаления);
	Результат.Вставить("ИнтерактивнаяПометкаНаУдалениеПредопределенных", Перечисления.гпр_ПраваДоступа.ИнтерактивнаяПометкаНаУдалениеПредопределенных);
	Результат.Вставить("ИнтерактивноеСнятиеПометкиУдаления", Перечисления.гпр_ПраваДоступа.ИнтерактивноеСнятиеПометкиУдаления);
	Результат.Вставить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенных", Перечисления.гпр_ПраваДоступа.ИнтерактивноеСнятиеПометкиУдаленияПредопределенных);
	Результат.Вставить("ИнтерактивноеУдаление", Перечисления.гпр_ПраваДоступа.ИнтерактивноеУдаление);
	Результат.Вставить("ИнтерактивноеУдалениеПомеченныхПредопределенных", Перечисления.гпр_ПраваДоступа.ИнтерактивноеУдалениеПомеченныхПредопределенных);
	Результат.Вставить("ИнтерактивноеУдалениеПредопределенных", Перечисления.гпр_ПраваДоступа.ИнтерактивноеУдалениеПредопределенных);
	Результат.Вставить("ИнтерактивноеДобавление", Перечисления.гпр_ПраваДоступа.ИнтерактивноеДобавление);
	Результат.Вставить("ПереходНаВерсиюИсторииДанных", Перечисления.гпр_ПраваДоступа.ПереходНаВерсиюИсторииДанных);
	Результат.Вставить("Просмотр", Перечисления.гпр_ПраваДоступа.Просмотр);
	Результат.Вставить("ПросмотрИсторииДанных", Перечисления.гпр_ПраваДоступа.ПросмотрИсторииДанных);
	Результат.Вставить("Редактирование", Перечисления.гпр_ПраваДоступа.Редактирование);
	Результат.Вставить("РедактированияКомментарияВерсииИсторииДанных", Перечисления.гпр_ПраваДоступа.РедактированияКомментарияВерсииИсторииДанных);
	Результат.Вставить("Удаление", Перечисления.гпр_ПраваДоступа.Удаление);
	Результат.Вставить("Чтение", Перечисления.гпр_ПраваДоступа.Чтение);
	Результат.Вставить("ЧтениеИсторииДанных", Перечисления.гпр_ПраваДоступа.ЧтениеИсторииДанных);
	Результат.Вставить("ЧтениеИсторииДанныхОтсутствующихДанных", Перечисления.гпр_ПраваДоступа.ЧтениеИсторииДанныхОтсутствующихДанных);
	Возврат Результат;
	
КонецФункции

#КонецОбласти
