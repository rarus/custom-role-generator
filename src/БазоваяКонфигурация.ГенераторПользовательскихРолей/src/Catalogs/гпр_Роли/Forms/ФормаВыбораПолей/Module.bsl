///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2024, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним таблицу реквизитами
	ЗаполнитьРеквизитыОбъекта();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляОбъектов

&НаКлиенте
Процедура ПоляОбъектовИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПоляОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использование Тогда
		ПрочиеПоля = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПрочиеПоля = Ложь;
	УстановитьФлажкиВсемПолям(ПоляОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьФлажкиВсемПолям(ПоляОбъектов, Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура Завершить(Команда)
	
	Результат = Новый Массив;
	
	Если ПрочиеПоля Тогда
		Результат.Добавить(НСтр("ru='<Прочие поля>'"));
	Иначе
		ПолучитьВыбранныеПоля(ПоляОбъектов, Результат);
	КонецЕсли;
	
	Закрыть(СтрСоединить(Результат, ","));
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	
	ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗапретОтображения.Использование = Истина;
	ЗапретОтображения.Значение = Истина;
	ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("ЦветТекста");
	ЗапретОтображения.Использование = Истина;
	ЗапретОтображения.Значение = WebЦвета.СветлоСерый;
	
	НовыйОтбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоляОбъектов.НеИспользовать");
	НовыйОтбор.ПравоеЗначение = Истина;
	НовыйОтбор.Использование = Истина;
	
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоляОбъектов");
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта()
	
	СписокИсользованныхПолей = СтрРазделить(Параметры.ВыбранныеПоля, ",");
	СписокТекущихПолей = СтрРазделить(Параметры.ТекущиеПоля, ",");
	
	ПрочиеПоляПредставление = НСтр("ru='<Прочие поля>'");
	Если СписокИсользованныхПолей.Найти(ПрочиеПоляПредставление) <> Неопределено Тогда
		Элементы.ПрочиеПоля.ТолькоПросмотр = Истина;
	ИначеЕсли СписокТекущихПолей.Найти(ПрочиеПоляПредставление) <> Неопределено Тогда
		ПрочиеПоля = Истина; 
	КонецЕсли;
	
	СписокПолейОбъекта = РеквизитФормыВЗначение("ПоляОбъектов", Тип("ДеревоЗначений"));
	
	ИмяВидаОбъекта = Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданных(Параметры.ВидОбъекта);
	
	ДоступныеОбъектуГруппы = ПодчиненныеРеквизитыОбъекта(Параметры.ВидОбъекта);
	
	МетаданныеОбъекта = Метаданные[ИмяВидаОбъекта][Параметры.ИмяОбъекта];
	
	Если ДоступныеОбъектуГруппы.Свойство("ЕстьВерсияДанных")
		И ДоступныеОбъектуГруппы.ЕстьВерсияДанных Тогда
		
		ДобавитьПолеОбъекта(СписокПолейОбъекта, "ВерсияДанных", СписокИсользованныхПолей, СписокТекущихПолей);
			
	КонецЕсли;
	
	Для Каждого ГруппаПодчиненных Из ДоступныеОбъектуГруппы.Элементы Цикл
	
		Для Каждого Реквизит Из МетаданныеОбъекта[ГруппаПодчиненных.ИмяТипаРеквизита] Цикл
			
			Если ГруппаПодчиненных.СписокРеквизитовОграничений.Количество() > 0
				И ГруппаПодчиненных.СписокРеквизитовОграничений.Найти(Реквизит.Имя) = Неопределено Тогда
					Продолжить;
			КонецЕсли;
			
			ДобавитьПолеОбъекта(СписокПолейОбъекта, Реквизит.Имя, СписокИсользованныхПолей, СписокТекущихПолей);
			
			Если Не ЗначениеЗаполнено(ГруппаПодчиненных.РеквизитРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ГруппаПодчиненных.ИмяТипаРеквизита = "ТабличныеЧасти" Тогда
				ДобавитьПолеОбъекта(
					СписокПолейОбъекта.Строки[СписокПолейОбъекта.Строки.Количество() - 1],
					"НомерСтроки",
					СписокИсользованныхПолей,
					СписокТекущихПолей);				
			КонецЕсли;
			
			Для Каждого РеквизитРеквизита Из МетаданныеОбъекта[ГруппаПодчиненных.ИмяТипаРеквизита][Реквизит.Имя][ГруппаПодчиненных.РеквизитРеквизита] Цикл
				
				ДобавитьПолеОбъекта(
					СписокПолейОбъекта.Строки[СписокПолейОбъекта.Строки.Количество() - 1],
					РеквизитРеквизита.Имя,
					СписокИсользованныхПолей,
					СписокТекущихПолей,
					СтрШаблон("%1.%2", Реквизит.Имя, РеквизитРеквизита.Имя));
				
			КонецЦикла;		
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(СписокПолейОбъекта, "ПоляОбъектов");
		
КонецПроцедуры

&НаСервере
Функция ПодчиненныеРеквизитыОбъектов()
	
	КоллекцияОписаний = Новый Соответствие();
	
	ЭлементыПоУмолчанию = Новый Массив();
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыТабличныеЧасти());
	ЭлементыПоУмолчанию.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ДанныеОбъекта = Новый Структура("Элементы,ЕстьВерсияДанных", ЭлементыПоУмолчанию, Истина);
	
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Справочник, ДанныеОбъекта);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.Документ, ДанныеОбъекта);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланОбмена, ДанныеОбъекта);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовХарактеристик, ДанныеОбъекта);
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.БизнесПроцесс, ДанныеОбъекта);
	
	
	ЭлементыЗадача = Новый Массив();
	ЭлементыЗадача.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыЗадача.Добавить(ОписаниеГруппыТабличныеЧасти());
	ЭлементыЗадача.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ЭлементыЗадача.Добавить(ОписаниеГруппыРеквизитыАдресации());
	ДанныеОбъекта = Новый Структура("Элементы,ЕстьВерсияДанных", ЭлементыЗадача, Истина);
		
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ЗадачаИсполнителя, ДанныеОбъекта);
	
	ЭлементыРегистр = Новый Массив();
	ЭлементыРегистр.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыРегистр.Добавить(ОписаниеГруппыИзмерения());
	ЭлементыРегистр.Добавить(ОписаниеГруппыРесурсы());
	ДанныеОбъекта = Новый Структура("Элементы,ЕстьВерсияДанных", ЭлементыРегистр, Ложь);
	
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.РегистрСведений, ДанныеОбъекта);
	
	ЭлементыПланСчетов = Новый Массив();
	ЭлементыПланСчетов.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыПланСчетов.Добавить(ОписаниеГруппыТабличныеЧасти());
	ЭлементыПланСчетов.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ЭлементыПланСчетов.Добавить(ОписаниеГруппыПризнакиУчета());
	ДанныеОбъекта = Новый Структура("Элементы,ЕстьВерсияДанных", ЭлементыПланСчетов, Истина);
		
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланСчетов, ДанныеОбъекта);
	
	ЭлементыЖурнала = Новый Массив();
	ЭлементыЖурнала.Добавить(ОписаниеГруппыГрафы());
	ЭлементыЖурнала.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ДанныеОбъекта = Новый Структура("Элементы,ЕстьВерсияДанных", ЭлементыЖурнала, Ложь);
	
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ЖурналДокументов, ДанныеОбъекта);
	
	ЭлементыПланВидовРасчета = Новый Массив();
	ЭлементыПланВидовРасчета.Добавить(ОписаниеГруппыРеквизиты());
	ЭлементыПланВидовРасчета.Добавить(ОписаниеГруппыТабличныеЧасти());
	ЭлементыПланВидовРасчета.Добавить(ОписаниеГруппыСтандартныеРеквизиты());
	ЭлементыПланВидовРасчета.Добавить(ОписаниеГруппыСтандартныеТабличныеЧасти());
	ДанныеОбъекта = Новый Структура("Элементы,ЕстьВерсияДанных", ЭлементыПланВидовРасчета, Истина);
	
	КоллекцияОписаний.Вставить(Перечисления.гпр_ВидыМетаданных.ПланВидовРасчета, ДанныеОбъекта);
	
	Возврат КоллекцияОписаний;
	
КонецФункции

&НаСервере
Функция ПодчиненныеРеквизитыОбъекта(ВидОбъекта)
	
	Возврат ПодчиненныеРеквизитыОбъектов().Получить(ВидОбъекта);
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыСтандартныеРеквизиты()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "СтандартныеРеквизиты");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыТабличныеЧасти()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "ТабличныеЧасти");
	Результат.Вставить("РеквизитРеквизита", "Реквизиты");
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыРеквизиты()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "Реквизиты");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыИзмерения()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "Измерения");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыРесурсы()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "Ресурсы");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыРеквизитыАдресации()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "РеквизитыАдресации");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыПризнакиУчета()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "ПризнакиУчета");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыГрафы()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "Графы");
	Результат.Вставить("РеквизитРеквизита", Неопределено);
	Результат.Вставить("СписокРеквизитовОграничений", Новый Массив());
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеГруппыСтандартныеТабличныеЧасти()
	
	ДоступныеТабличныеЧасти = Новый Массив;
	ДоступныеТабличныеЧасти.Добавить("ВедущиеВидыРасчета");
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаРеквизита", "СтандартныеТабличныеЧасти");
	Результат.Вставить("РеквизитРеквизита", "СтандартныеРеквизиты");
	Результат.Вставить("СписокРеквизитовОграничений", ДоступныеТабличныеЧасти);	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПолеОбъекта(
		СписокПолейОбъекта,
		ИмяПоля,
		СписокИсользованныхПолей,
		СписокТекущихПолей,
		ПолеПоиска = Неопределено)
		
	ПолеДляПоиска = ?(ПолеПоиска = Неопределено, ИмяПоля, ПолеПоиска);
	НоваяСтрока = СписокПолейОбъекта.Строки.Добавить();
	НоваяСтрока.Имя = ИмяПоля;
	НоваяСтрока.НеИспользовать = (СписокИсользованныхПолей.Найти(ПолеДляПоиска) <> Неопределено);
	НоваяСтрока.Использование = (СписокТекущихПолей.Найти(ПолеДляПоиска) <> Неопределено);
	НоваяСтрока.ПолеПоиска = ПолеДляПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВсемПолям(СтрокиПолей, ЗначениеФлажка = Истина)
	
	Для Каждого ТекущийРеквизит Из СтрокиПолей.ПолучитьЭлементы() Цикл
		
		Если Не ТекущийРеквизит.НеИспользовать Тогда
			ТекущийРеквизит.Использование = ЗначениеФлажка;
		КонецЕсли;
		
		// Пройдемся по подчиненным	
		УстановитьФлажкиВсемПолям(ТекущийРеквизит, ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеПоля(СтрокиПолей, ВыбранныеПоля)
	
	Для Каждого ТекущийРеквизит Из СтрокиПолей.ПолучитьЭлементы() Цикл
		
		Если ТекущийРеквизит.Использование Тогда
			ВыбранныеПоля.Добавить(ТекущийРеквизит.ПолеПоиска);
		КонецЕсли;
		
		// Пройдемся по подчиненным	
		ПолучитьВыбранныеПоля(ТекущийРеквизит, ВыбранныеПоля);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти