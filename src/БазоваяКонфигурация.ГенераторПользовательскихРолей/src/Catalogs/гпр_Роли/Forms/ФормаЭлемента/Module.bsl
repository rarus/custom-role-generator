///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2024, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ЗаполнитьПодсистемы();
	
	Если ПустаяСтрока(РежимРедактора) Тогда
		
		РежимРедактора = "Простой";
		
	КонецЕсли;
	
	ОбновитьРежимРедактирования();
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ЗаполнитьВидыОбъектовВДереве();
		
		Если Объект.ПраваДоступа.Количество() > 0 Тогда
			
			ЗаполнитьРедакторРолейПоПравамДоступа(
				Объект.ПраваДоступа.Выгрузить(),
				Объект.ОграниченияДоступаКДанным
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	гпр_ОбщегоНазначения.ЗаписатьОперациюБизнесСтатистики("ОткрытиеФормыРедактораРоли");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ТекущийВидОбъекта Из ОбъектыКонфигурации.ПолучитьЭлементы() Цикл
		
		ОбновитьЗначенияОбщихПрав(ТекущийВидОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("РежимРедактора") = "Эксперт" Тогда
		
		ОбновитьРежимРедактирования();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьВидыОбъектовВДереве();
	ЗаполнитьРедакторРолейПоПравамДоступа(
		ТекущийОбъект.ПраваДоступа.Выгрузить(),
		ТекущийОбъект.ОграниченияДоступаКДанным
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Подсистемы.Очистить();
	УпаковатьПодсистемыВОбъект(ТекущийОбъект.Подсистемы, Подсистемы.ПолучитьЭлементы());
	ТекущийОбъект.ПраваДоступа.Очистить();
	ТекущийОбъект.ОграниченияДоступаКДанным.Очистить();
	УпаковатьПраваДоступаВОбъект(
		ТекущийОбъект.ПраваДоступа,
		ОбъектыКонфигурации,
		ТекущийОбъект.ОграниченияДоступаКДанным);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРедактораПриИзменении(Элемент)
	
	ОбновитьРежимРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоСвязаннымОбъектамПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыКонфигурации.ТекущиеДанные;
	
	Если
		ФильтрПоСвязаннымОбъектам
		И (ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.ИмяОбъекта))
	Тогда
			
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для установки фильтра необходимо выбрать строку объекта.'");
		Сообщение.Сообщить();
		ФильтрПоСвязаннымОбъектам = Ложь;
		Возврат;
			
	КонецЕсли;
	
	Элементы.НадписьОбъектаСвязанныхОбъектов.Заголовок = ?(
		ФильтрПоСвязаннымОбъектам,
		ТекущиеДанные.ИмяОбъекта,
		НСтр("ru = '<Имя объекта>'")
	);
	
	ФильтрТолькоСвязанныеОбъектыНаСервере(
		ТекущиеДанные.ВидОбъекта,
		ТекущиеДанные.ИмяОбъекта,
		Не ФильтрПоСвязаннымОбъектам
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРолиВКонфигурацииПриИзменении(Элемент)
	
	Объект.Наименование = РазбитьПоСловам(Объект.ИмяРолиВКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодсистемы

&НаКлиенте
Процедура ПодсистемыИспользованиеПриИзменении(Элемент)
	
	Если Не Элементы.Подсистемы.ТекущиеДанные.Использование Тогда
		
		УстановитьЗначениеИспользованияДляПодчиненных(Элементы.Подсистемы.ТекущиеДанные);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыКонфигурации

&НаКлиенте
Процедура ОбъектыКонфигурацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыКонфигурации.ТекущиеДанные;
	ИмяПраваДоступа = СтрЗаменить(Элементы.ОбъектыКонфигурации.ТекущийЭлемент.Имя, "ОбъектыКонфигурации", "");
	
	Если СтрНачинаетсяС(ИмяПраваДоступа, "Общее") Тогда
		
		// Третье состояние нам вручную устанавливать не нужно, оно только для отображения изменений в экспертном режиме
		Если ТекущиеДанные[ИмяПраваДоступа] = 2 Тогда
			
			ТекущиеДанные[ИмяПраваДоступа] = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	гпр_ОбщегоНазначенияКлиент.УстановитьЗначениеДляДетей(ТекущиеДанные, ИмяПраваДоступа);
	
	Если СтрНачинаетсяС(ИмяПраваДоступа, "Общее") Тогда
		
		УстановитьЗависимыеПраваДоступаОбщихПрав(ТекущиеДанные, ИмяПраваДоступа);
		
	Иначе
			
		УстановитьЗависимыеПраваДоступа(ТекущиеДанные, ИмяПраваДоступа);
		
	КонецЕсли;
	
	ОбновитьЗначенияОбщихПрав(ТекущиеДанные);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбъектыКонфигурацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОбъектыКонфигурацииОграничениеДоступаКДанным" 
		И Элемент.ТекущиеДанные <> Неопределено
		И Не ПустаяСтрока(Элемент.ТекущиеДанные.ИмяОбъекта) Тогда
		
		РедактироватьОграниченияДоступаОбъекта();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКонфигурацииПриАктивизацииСтроки(Элемент)
	
	ЭтоТекущаяСтрокаОбъекта = (Элемент.ТекущиеДанные <> Неопределено
		И Не ПустаяСтрока(Элемент.ТекущиеДанные.ИмяОбъекта));
	Элементы.ОбъектыКонфигурацииИзменитьОграниченияДоступаОбъекта.Доступность = ЭтоТекущаяСтрокаОбъекта;
	Элементы.ОбъектыКонфигурацииДобавитьСвязанныеОбъекты.Доступность = ЭтоТекущаяСтрокаОбъекта
		И Элемент.ТекущиеДанные.ВидОбъекта <> ПредопределенноеЗначение("Перечисление.гпр_ВидыМетаданных.Подсистема");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьОбъект(Команда)
	
	НачатьДобавлениеОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСвязанныеОбъекты(Команда)
	
	НачатьПоискСвязанныхОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРоли(Команда)
	
	НачалоЗаполненияПравДоступаРолью();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъект(Команда)
	
	ОбъектыКУдалению = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ОбъектыКонфигурации.ВыделенныеСтроки Цикл
		
		СтрокаОбъекта = ОбъектыКонфигурации.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ПустаяСтрока(СтрокаОбъекта.ИмяОбъекта) Тогда
			
			Для Каждого Дочка Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
			
				Если ОбъектыКУдалению.Найти(Дочка) = Неопределено Тогда
					
					ОбъектыКУдалению.Добавить(Дочка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			КУдалению = ГруппировкаОбъекта(СтрокаОбъекта);
			
			Если ОбъектыКУдалению.Найти(КУдалению) = Неопределено Тогда
				
				ОбъектыКУдалению.Добавить(КУдалению);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьВидыОбъектов = Новый Массив;
	
	Для Каждого КУдалению Из ОбъектыКУдалению Цикл
		
		РодительОбъекта = КУдалению.ПолучитьРодителя();
		
		 НайденныеОбъекты = ОбъектыВДереве
			.НайтиСтроки(Новый Структура("ВидОбъекта,ИмяОбъекта", КУдалению.ВидОбъекта, КУдалению.ИмяОбъекта));
		
		Для Каждого УдаляемыйОбъект Из НайденныеОбъекты Цикл
			
			ОбъектыВДереве.Удалить(УдаляемыйОбъект);
				
		КонецЦикла;
		
		РодительОбъекта.ПолучитьЭлементы().Удалить(КУдалению);
		
		Если УдалитьВидыОбъектов.Найти(РодительОбъекта) = Неопределено Тогда
			
			УдалитьВидыОбъектов.Добавить(РодительОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВидовОбъекта = Новый Массив;
	
	Для Каждого ТекущийВидОбъекта Из УдалитьВидыОбъектов Цикл
		
		Если ТекущийВидОбъекта.ПолучитьЭлементы().Количество() = 0 Тогда
			
			СписокВидовОбъекта.Добавить(ТекущийВидОбъекта.ВидОбъекта);
			
			ОбъектыКонфигурации.ПолучитьЭлементы().Удалить(ТекущийВидОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущийВидОбъекта Из СписокВидовОбъекта Цикл
		
		НайденныеГруппы = ВидыОбъектовВДереве.НайтиСтроки(Новый Структура("ВидОбъекта", ТекущийВидОбъекта));
		
		Если НайденныеГруппы.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Найдем индекс группы и его уберем
		ИндексТекущегоВида = НайденныеГруппы[0].ИндексГруппы;
		НайденныеГруппы[0].ИндексГруппы = -1;
		
		Для Каждого ТекущаяСтрока Из ВидыОбъектовВДереве Цикл
			
			Если ТекущаяСтрока.ИндексГруппы > ИндексТекущегоВида Тогда
				
				ТекущаяСтрока.ИндексГруппы = ТекущаяСтрока.ИндексГруппы - 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграниченияДоступаОбъекта(Команда)
	
	РедактироватьОграниченияДоступаОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	СвернутьРазвернутьОбъектыКонфигурации(ОбъектыКонфигурации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьРазвернутьОбъектыКонфигурации(ОбъектыКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЗаблокироватьНедоступныеПраваДоступа();
	УбратьОписаниеСинонимаДляВидовОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьНедоступныеПраваДоступа()
	
	ИменаРеквизитовПоПравамДоступа = гпр_РаботаСКонфигурациейСервер.ПраваДоступаПоИменамРеквизитов();
	ИменаРеквизитовПоПравамДоступа.Вставить("ОбщееЧтение");
	ИменаРеквизитовПоПравамДоступа.Вставить("ОбщееИзменение");
	ИменаРеквизитовПоПравамДоступа.Вставить("ОбщееУдаление");
	
	ПраваДоступаПоВидамОбъектов = гпр_РаботаСКонфигурациейСервер.ПраваДоступаПоВидамОбъектов(Истина);
	
	Для Каждого ВидОбъекта Из ПраваДоступаПоВидамОбъектов Цикл
		
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("Отображать");
		ЗапретОтображения.Использование = Истина;
		ЗапретОтображения.Значение = Ложь;
		
		ГруппаИ = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаИ.Использование = Истина;
		
		НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ВидОбъекта");
		НовыйОтбор.ПравоеЗначение = ВидОбъекта.Ключ;
		НовыйОтбор.Использование = Истина;
		
		НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ТипРеквизита");
		НовыйОтбор.Использование = Истина;
		
		Для Каждого ПравоДоступа Из ИменаРеквизитовПоПравамДоступа Цикл
			
			Если Не ВидОбъекта.Значение.Свойство(ПравоДоступа.Ключ) Тогда
				
				НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации"
					+ ПравоДоступа.Ключ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПраваДоступаПоТипамРеквизитов = гпр_РаботаСКонфигурациейСервер.ПраваДоступаПоТипамРеквизитов();
	
	Для Каждого ТипРеквизита Из ПраваДоступаПоТипамРеквизитов Цикл
		
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("Отображать");
		ЗапретОтображения.Использование = Истина;
		ЗапретОтображения.Значение = Ложь;
		
		ГруппаИ = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаИ.Использование = Истина;
		
		НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ВидОбъекта");
		НовыйОтбор.Использование = Истина;
		
		НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ТипРеквизита");
		НовыйОтбор.ПравоеЗначение = ТипРеквизита.Ключ;
		НовыйОтбор.Использование = Истина;
		
		Для Каждого ПравоДоступа Из ИменаРеквизитовПоПравамДоступа Цикл
			
			Если Не ТипРеквизита.Значение.Свойство(ПравоДоступа.Ключ) Тогда
				
				НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации"
					+ ПравоДоступа.Ключ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УбратьОписаниеСинонимаДляВидовОбъекта()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	
	ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("Отображать");
	ЗапретОтображения.Использование = Истина;
	ЗапретОтображения.Значение = Ложь;
	
	ГруппаИ = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИ.Использование = Истина;
	
	НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ИмяОбъекта");
	НовыйОтбор.Использование = Истина;
	
	НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ИмяРеквизита");
	НовыйОтбор.Использование = Истина;
	
	НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ИмяРеквизитаТабличнойЧасти");
	НовыйОтбор.Использование = Истина;
		
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурацииСинонимВРежимеЭксперт");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрПоСвязаннымОбъектам(ВидОбъекта, ИмяОбъекта)
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	
	ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("Видимость");
	ЗапретОтображения.Использование = Истина;
	ЗапретОтображения.Значение = Ложь;
	
	НовыйОтбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ИмяОбъекта");
	НовыйОтбор.ПравоеЗначение = СписокНеСвязанныхОбъектов;
	НовыйОтбор.Использование = Истина;
	
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации");
	
	НовыйЭлемент.Представление = "ФильтрСвязанныхОбъектов";
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	
	ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("ЦветФона");
	ЗапретОтображения.Использование = Истина;
	ЗапретОтображения.Значение = WebЦвета.ЛососьТемный;
	
	ГруппаИ = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИ.Использование = Истина;	
	
	НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ИмяОбъекта");
	НовыйОтбор.ПравоеЗначение = ИмяОбъекта;
	НовыйОтбор.Использование = Истина;
	
	НовыйОтбор = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ВидОбъекта");
	НовыйОтбор.ПравоеЗначение = ВидОбъекта;
	НовыйОтбор.Использование = Истина;	
	
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКОбъектыКонфигурацииКартинкаОбъектаонфигурации");
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурацииПредставление");
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурацииСиноним");
	
	НовыйЭлемент.Представление = "ВыделитьСтрокуИмениОбъекта";
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРежимРедактирования()
	
	ЭтоЭксперт = РежимРедактора = "Эксперт";
	ЭтоПростой = РежимРедактора = "Простой";
	
	Элементы.ОбъектыКонфигурацииСинонимВРежимеЭксперт.Видимость = ЭтоЭксперт;
	Элементы.ПоляРежимаЭксперт.Видимость = ЭтоЭксперт;
	Элементы.ОбъектыКонфигурацииПредставление.Видимость = ЭтоЭксперт;
	Элементы.ПоляРежимаПротой.Видимость = ЭтоПростой;
	Элементы.ОбъектыКонфигурацииСиноним.Видимость = ЭтоПростой;
	
	Если ЭтоПростой Тогда
		
		НеОтображатьСтрокиСПодчиненнымиРеквизитами();
		
	Иначе
		
		ОтображатьСтрокиСПодчиненнымиРеквизитами();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеОтображатьСтрокиСПодчиненнымиРеквизитами()
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	
	НовыйЭлемент.Представление = "НеОтображатьСтрокиСПодчиненнымиРеквизитами";
	
	ЗапретОтображения = НовыйЭлемент.Оформление.Элементы.Найти("Видимость");
	ЗапретОтображения.Использование = Истина;
	ЗапретОтображения.Значение = Ложь;
		
	НовыйОтбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации.ТипРеквизита");
	НовыйОтбор.Использование = Истина;
	
	НовыйЭлемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбъектыКонфигурации");
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьСтрокиСПодчиненнымиРеквизитами()
	
	КУдалению = Неопределено;
	
	Для Каждого Оформление Из УсловноеОформление.Элементы Цикл
		
		Если Оформление.Представление = "НеОтображатьСтрокиСПодчиненнымиРеквизитами" Тогда
			
			КУдалению = Оформление;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КУдалению <> Неопределено Тогда
		
		УсловноеОформление.Элементы.Удалить(КУдалению);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РазбитьПоСловам(Знач Строка)
	
	Если ПустаяСтрока(Строка) Тогда
		
		Возврат Строка;
		
	КонецЕсли;
	
	Результат = "";
	
	Пока Не ПустаяСтрока(Строка) Цикл
		
		Буква = Лев(Строка, 1);
		
		Если ПустаяСтрока(Результат) Тогда
			
			Результат = Результат + Буква;
			
		ИначеЕсли ЭтоБукваВВерхнемРегистре(Буква) Тогда
			
			Результат = Результат + " " + НРег(Буква);
			
		Иначе
			
			Результат = Результат + Буква;
			
		КонецЕсли;
		
		Строка = Сред(Строка, 2);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоБукваВВерхнемРегистре(Буква)
	
	Возврат Буква <> НРег(Буква);
	
КонецФункции

#Область Подсистемы

&НаСервере
Процедура ЗаполнитьПодсистемы()

	ПодсистемыКонфигурации = гпр_РаботаСКонфигурациейСервер.ПодсистемыКонфигурации();
	
	Для Каждого ПодсистемаКонфигурации Из ПодсистемыКонфигурации.Строки Цикл
		
		ЗаполнитьДеревоПодсистемНаФорме(ПодсистемаКонфигурации, Подсистемы.ПолучитьЭлементы());
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодсистемНаФорме(ПодсистемаКонфигурации, Дерево)
	
	ЭлементДерева = Дерево.Добавить();
	ЗаполнитьЗначенияСвойств(ЭлементДерева, ПодсистемаКонфигурации);
	ЭлементДерева.КартинкаПодсистемы = БиблиотекаКартинок.гпр_Подсистема;
	ЭлементДерева.Использование = Объект.Подсистемы
		.НайтиСтроки(Новый Структура("Подсистема", ЭлементДерева.Подсистема))
		.Количество();
		
	Для Каждого Дочка Из ПодсистемаКонфигурации.Строки Цикл
		
		ЗаполнитьДеревоПодсистемНаФорме(Дочка, ЭлементДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УпаковатьПодсистемыВОбъект(Коллекция, ПодсистемыЗаполнения)

	Для Каждого ТекущаяПодсистема Из ПодсистемыЗаполнения Цикл
		
		Если ТекущаяПодсистема.Использование Тогда
			
			НоваяСтрока = Коллекция.Добавить();
			НоваяСтрока.Подсистема = ТекущаяПодсистема.Подсистема;
			
		КонецЕсли;
		
		УпаковатьПодсистемыВОбъект(Коллекция, ТекущаяПодсистема.ПолучитьЭлементы());
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеИспользованияДляПодчиненных(Родитель)
	
	Для Каждого Дочка Из Родитель.ПолучитьЭлементы() Цикл
		
		Дочка.Использование = Родитель.Использование;
		УстановитьЗначениеИспользованияДляПодчиненных(Дочка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедакторРоли

&НаСервере
Процедура ЗаполнитьВидыОбъектовВДереве()
	
	ОсновнойПорядокМетаданныхВДереве = гпр_РаботаСКонфигурациейСервер.ОсновнойПорядокМетаданныхВДереве();
	Сч = 1;
	
	Для Каждого ВидОбъекта Из ОсновнойПорядокМетаданныхВДереве Цикл
		
		НоваяГруппа = ВидыОбъектовВДереве.Добавить();
		НоваяГруппа.ВидОбъекта = ВидОбъекта;
		НоваяГруппа.Порядок = Сч;
		НоваяГруппа.ИндексГруппы = -1;
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеОбъекта()
	
	ОписаниеОповещенияДобавлениеОбъекта = Новый ОписаниеОповещения("ДобавлениеОбъектаЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.гпр_Роли.Форма.ФормаВыбораОбъекта",
		Новый Структура("УжеВыбранныеОбъекты", ОбъектыВДереве(ОбъектыВДереве)),
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещенияДобавлениеОбъекта
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектыВДереве(Знач ОбъектыВДереве)
	
	Результат = Новый Массив();
	
	Для Каждого ОбъектВДереве Из ОбъектыВДереве Цикл
		
		Результат.Добавить(
			Новый Структура(
				"ВидОбъекта,ИмяОбъекта",
				ОбъектВДереве.ВидОбъекта,
				ОбъектВДереве.ИмяОбъекта
			)
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавлениеОбъектаЗавершение(РезультатВыбора, ДополнительныеПараметры = Неопределено) Экспорт

	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		ДобавитьОбъектыДляУстановкиПравДоступа(РезультатВыбора);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъектыДляУстановкиПравДоступа(ДобавляемыеОбъекты, РежимЗагрузкиРоли = Ложь)

	Для Каждого ДобавляемыйОбъект Из ДобавляемыеОбъекты Цикл
		
		Если ОбъектУжеВДереве(ДобавляемыйОбъект) Или Не ОбъектСуществует(ДобавляемыйОбъект) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьОбъектВДерево(ДобавляемыйОбъект, РежимЗагрузкиРоли);
		
	КонецЦикла;
	
	ДляСортировки = РеквизитФормыВЗначение("ОбъектыКонфигурации", Тип("ДеревоЗначений"));
	
	Для Каждого Строка Из ДляСортировки.Строки Цикл
		
		Строка.Строки.Сортировать("ИмяОбъекта");
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДляСортировки, "ОбъектыКонфигурации");
	
КонецПроцедуры

&НаСервере
Функция ОбъектУжеВДереве(ДобавляемыйОбъект)
	
	Возврат ОбъектыВДереве
		.НайтиСтроки(Новый Структура("ВидОбъекта,ИмяОбъекта", ДобавляемыйОбъект.Значение, ДобавляемыйОбъект.Ключ))
		.Количество() > 0;
	
КонецФункции

&НаСервере
Функция ОбъектСуществует(ДобавляемыйОбъект)
	
	ИмяВидаОбъекта =  Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданных(ДобавляемыйОбъект.Значение);
	Возврат НайтиМетаданое(ДобавляемыйОбъект.Ключ, ИмяВидаОбъекта) <> Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиМетаданое(ПутьКМетаданному, ВидОбъекта)
	
	Если Не ЗначениеЗаполнено(ВидОбъекта) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧастиПути = СтрРазделить(ПутьКМетаданному, ".");
	
	Если ЧастиПути.Количество() = 1 Тогда
		
		Возврат Метаданные[ВидОбъекта].Найти(ПутьКМетаданному);
		
	КонецЕсли;
	
	ИмяМетаданного = ЧастиПути.Получить(ЧастиПути.ВГраница());
	ЧастиПути.Удалить(ЧастиПути.ВГраница());
	НайденныйРодитель = НайтиМетаданое(СтрСоединить(ЧастиПути, "."), ВидОбъекта);
	
	Если НайденныйРодитель <> Неопределено Тогда
		
		Возврат НайденныйРодитель[ВидОбъекта].Найти(ИмяМетаданного);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ГруппаДляНовогоОбъекта(ВидОбъекта)
	
	НайденныеСтроки = ВидыОбъектовВДереве.НайтиСтроки(Новый Структура("ВидОбъекта", ВидОбъекта));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ВызватьИсключение "Вид метаданных не обнаружен";
		
	КонецЕсли;
	
	Если НайденныеСтроки[0].ИндексГруппы = -1 Тогда
		
		ИндексТекущейСтроки = ВидыОбъектовВДереве.Индекс(НайденныеСтроки[0]);
		ТекущийИндекс = 0;
		
		Если ИндексТекущейСтроки <> 0 Тогда
			
			Сч = ИндексТекущейСтроки - 1;
			
			Пока Сч >= 0 Цикл
				
				Если ВидыОбъектовВДереве.Получить(Сч).ИндексГруппы <> -1 Тогда
					
					ТекущийИндекс = ВидыОбъектовВДереве.Получить(Сч).ИндексГруппы + 1;
					Прервать;
					
				КонецЕсли;
				
				Сч = Сч - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НайденныеСтроки[0].ИндексГруппы = ТекущийИндекс;
		
		Для Сч = ВидыОбъектовВДереве.Индекс(НайденныеСтроки[0])+1 По ВидыОбъектовВДереве.Количество() - 1 Цикл
			
			ТекущаяСтрока = ВидыОбъектовВДереве.Получить(Сч);
			
			Если ТекущаяСтрока.ИндексГруппы >= ТекущийИндекс Тогда
				
				ТекущаяСтрока.ИндексГруппы = ТекущаяСтрока.ИндексГруппы + 1;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		НоваяГруппа = ОбъектыКонфигурации.ПолучитьЭлементы().Вставить(ТекущийИндекс);
		
		ИмяВида = Перечисления.гпр_ВидыМетаданных.ИмяВидаОбъектаПоВидуМетаданных(ВидОбъекта);
		НоваяГруппа.ВидОбъекта = ВидОбъекта;
		НоваяГруппа.Представление = ИмяВида;
		НоваяГруппа.Синоним = ИмяВида;
		НоваяГруппа.КартинкаОбъекта = Перечисления.гпр_ВидыМетаданных.КартинкаМетаданных(ВидОбъекта);
		
		Возврат НоваяГруппа;
		
	КонецЕсли;
	
	Возврат ОбъектыКонфигурации.ПолучитьЭлементы().Получить(НайденныеСтроки[0].ИндексГруппы);
	
КонецФункции

&НаСервере
Функция ДобавитьОбъектВДерево(ДобавляемыйОбъект, РежимЗагрузкиРоли = Ложь)

	НовыйОбъект = ГруппаДляНовогоОбъекта(ДобавляемыйОбъект.Значение).ПолучитьЭлементы().Добавить();
	НовыйОбъект.ИдентификаторСтроки = Новый УникальныйИдентификатор();
	НовыйОбъект.ИмяОбъекта = ДобавляемыйОбъект.Ключ;
	НовыйОбъект.ВидОбъекта = ДобавляемыйОбъект.Значение;

	НовыйОбъект.КартинкаОбъекта = Перечисления.гпр_ВидыМетаданных.КартинкаМетаданных(ДобавляемыйОбъект.Значение);
	
	ИмяМетаданныхОбъекта =  Перечисления.гпр_ВидыМетаданных.ИмяМетаданныхПоВидуМетаданных(ДобавляемыйОбъект.Значение);
	МетаданныеОбъекта = НайтиМетаданое(НовыйОбъект.ИмяОбъекта, ИмяМетаданныхОбъекта);
	
	НовыйОбъект.Представление = НовыйОбъект.ИмяОбъекта;
	
	Если ПустаяСтрока(МетаданныеОбъекта.Синоним) Тогда
		
		НовыйОбъект.Синоним = НовыйОбъект.ИмяОбъекта;
		
	Иначе
		
		НовыйОбъект.Синоним = МетаданныеОбъекта.Синоним;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектыВДереве.Добавить(), НовыйОбъект);
	ДоступныеОбъектуГруппы = гпр_РаботаСКонфигурациейСервер
		.ДоступныеГруппыПодчиненныхЭлементовПоВидуОбъекта(ДобавляемыйОбъект.Значение);
	
	Если Не ЗначениеЗаполнено(ДоступныеОбъектуГруппы) Тогда
		
		Возврат НовыйОбъект;
		
	КонецЕсли;
	
	ПраваДоступаПоТипамРеквизитов = гпр_РаботаСКонфигурациейСервер.ПраваДоступаПоТипамРеквизитов();
	ОписаниеСтандартногоРеквизита = гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыСтандартныеРеквизиты();
	ОписаниеСтандартнойТабличнойЧасти = гпр_РаботаСКонфигурациейСерверПовтИсп.ОписаниеГруппыСтандартныеТабличныеЧасти();
	
	Для Каждого ГруппаЭлементов Из ДоступныеОбъектуГруппы Цикл
		
		НоваяГруппа = НовыйОбъект.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяГруппа, НовыйОбъект,, "Синоним");
		НоваяГруппа.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		НоваяГруппа.Представление = ГруппаЭлементов.Представление;
		НоваяГруппа.КартинкаОбъекта = ГруппаЭлементов.Картинка;
		НоваяГруппа.ТипРеквизита = ГруппаЭлементов.ТипРеквизита;
		
		ЭлементыГруппы = МетаданныеОбъекта[ГруппаЭлементов.ИмяТипаРеквизита];
		
		Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
			
			Если
				ГруппаЭлементов.ТипРеквизита <> ОписаниеСтандартногоРеквизита.ТипРеквизита
				И ГруппаЭлементов.ТипРеквизита <> ОписаниеСтандартнойТабличнойЧасти.ТипРеквизита
				И ЭлементГруппы.РасширениеКонфигурации() <> Неопределено
			Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлементГруппы = НоваяГруппа.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлементГруппы, НоваяГруппа,, "Синоним");
			
			Если Не ПустаяСтрока(ЭлементГруппы.Синоним) Тогда
				
				НовыйЭлементГруппы.Синоним = ЭлементГруппы.Синоним;
				
			Иначе
				
				СинонимРеквизита = гпр_РаботаСКонфигурациейСерверПовтИсп.СинонимСтандатногоРеквизита(ЭлементГруппы.Имя);
				
				Если СинонимРеквизита = Неопределено Тогда
					
					НовыйЭлементГруппы.Синоним = ЭлементГруппы.Имя;
					
				Иначе
					НовыйЭлементГруппы.Синоним = СинонимРеквизита;
					
				КонецЕсли;
				
			КонецЕсли;			
			
			НовыйЭлементГруппы.ИдентификаторСтроки = Новый УникальныйИдентификатор();
			НовыйЭлементГруппы.ИмяРеквизита = ЭлементГруппы.Имя;
			НовыйЭлементГруппы.Представление = ЭлементГруппы.Имя;
			
			Если Объект.УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию
				И НЕ РежимЗагрузкиРоли Тогда
				
				ДоступныеПрава = ПраваДоступаПоТипамРеквизитов.Получить(НовыйЭлементГруппы.ТипРеквизита);
				
				Если ЗначениеЗаполнено(ДоступныеПрава) Тогда
					
					Для Каждого КлючЗначение Из ДоступныеПрава Цикл
						
						НоваяГруппа[КлючЗначение.Ключ] = Истина;
						НовыйЭлементГруппы[КлючЗначение.Ключ] = Истина;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГруппаЭлементов.РеквизитРеквизита) Тогда
				
				ИмяГруппыРеквизитов = Перечисления.гпр_ТипыРеквизитовОбъекта
					.ИмяГруппыРеквизитовПоТипу(ГруппаЭлементов.РеквизитРеквизита);
				ПодчиненныеРеквизиты = МетаданныеОбъекта[ГруппаЭлементов.ИмяТипаРеквизита][ЭлементГруппы.Имя][ИмяГруппыРеквизитов];
				
				Для Каждого ПодчиненныйРеквизит Из ПодчиненныеРеквизиты Цикл
					
					Если ГруппаЭлементов.РеквизитРеквизита <> ОписаниеСтандартногоРеквизита.ТипРеквизита
						И ПодчиненныйРеквизит.РасширениеКонфигурации() <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйПодчиненныйЭлемент = НовыйЭлементГруппы.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовыйЭлементГруппы, НовыйЭлементГруппы,, "Синоним");
					НовыйПодчиненныйЭлемент.ИмяРеквизита = ЭлементГруппы.Имя;
					НовыйПодчиненныйЭлемент.ВидОбъекта = НовыйОбъект.ВидОбъекта;
					
					Если Не ПустаяСтрока(ПодчиненныйРеквизит.Синоним) Тогда
						
						НовыйПодчиненныйЭлемент.Синоним = ПодчиненныйРеквизит.Синоним;
						
					Иначе
						
						СинонимРеквизита = гпр_РаботаСКонфигурациейСерверПовтИсп.СинонимСтандатногоРеквизита(ПодчиненныйРеквизит.Имя);
						
						Если СинонимРеквизита = Неопределено Тогда
							
							НовыйПодчиненныйЭлемент.Синоним = ПодчиненныйРеквизит.Имя;
							
						Иначе
							
							НовыйПодчиненныйЭлемент.Синоним = СинонимРеквизита;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НовыйПодчиненныйЭлемент.ИдентификаторСтроки = Новый УникальныйИдентификатор();
					НовыйПодчиненныйЭлемент.ТипРеквизита = ГруппаЭлементов.РеквизитРеквизита; 
					НовыйПодчиненныйЭлемент.ИмяРеквизитаТабличнойЧасти = ПодчиненныйРеквизит.Имя;
					НовыйПодчиненныйЭлемент.Представление = ПодчиненныйРеквизит.Имя;
					НовыйПодчиненныйЭлемент.КартинкаОбъекта = Перечисления.гпр_ТипыРеквизитовОбъекта
						.КартинкаРеквизита(ГруппаЭлементов.РеквизитРеквизита);
					
						Если Объект.УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию
							И НЕ РежимЗагрузкиРоли Тогда
						
						ДоступныеПрава = ПраваДоступаПоТипамРеквизитов.Получить(НовыйПодчиненныйЭлемент.ТипРеквизита);
						
						Если ЗначениеЗаполнено(ДоступныеПрава) Тогда
							
							Для Каждого КлючЗначение Из ДоступныеПрава Цикл
								
								НовыйПодчиненныйЭлемент[КлючЗначение.Ключ] = Истина;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НовыйОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРедакторРолейПоПравамДоступа(ПраваДоступа, ОграниченияДоступа)
	
	ПраваДоступаСвернутые = ПраваДоступа.Скопировать();
	ПраваДоступаСвернутые.Свернуть("ВидОбъекта,ИмяОбъекта");
	ПраваДоступаСвернутые.Сортировать("ВидОбъекта,ИмяОбъекта");
	
	// Соответствие не сортированная коллекция. Для заполнения данными сортированным по виду и имени объекта используем
	// массив структур.
	ОбъектыСПравамиДоступа = Новый Массив(); 
	
	Для Каждого ОбъектСПравамиДоступа Из ПраваДоступаСвернутые Цикл
		
		ОбъектыСПравамиДоступа.Добавить(
			Новый Структура("Ключ,Значение", ОбъектСПравамиДоступа.ИмяОбъекта, ОбъектСПравамиДоступа.ВидОбъекта)
		);
		
	КонецЦикла;
	
	ДобавитьОбъектыДляУстановкиПравДоступа(ОбъектыСПравамиДоступа, Истина);
	
	// Преобразуем права доступа в дерево
	ПраваДоступаЗаполнения = ПреобразованныеПраваДоступа(ПраваДоступа);
	
	ПоляПоиска = Новый Массив;
	ПоляПоиска.Добавить("ВидОбъекта");
	ПоляПоиска.Добавить("ИмяОбъекта");
	ПоляПоиска.Добавить("ТипРеквизита");
	
	ПоляПоискаРеквизитов = Новый Структура("ТипРеквизита,ИмяРеквизита");
	
	ЗаполнитьПраваДоступа(
		ОбъектыКонфигурации,
		ПраваДоступаЗаполнения,
		ОграниченияДоступа,
		ПоляПоиска,
		ПоляПоискаРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПраваДоступа(
		СтрокаЗаполнения,
		ПраваДоступаЗаполнения,
		ОграниченияДоступа,
		ПоляПоиска,
		ПоляПоискаРеквизитов,
		ВариантПоиска = 0)
	
	УсловиеПоиска = Новый Структура();
	УсловиеПоискаПодчиненный = Новый Структура();
	
	ИндексПоляПоиска = ВариантПоиска;
	Пока ИндексПоляПоиска >= 0 Цикл
		
		УсловиеПоиска.Вставить(ПоляПоиска[ИндексПоляПоиска], Null);
		УсловиеПоискаПодчиненный.Вставить(ПоляПоиска[ИндексПоляПоиска], Null);
		ИндексПоляПоиска = ИндексПоляПоиска - 1;
		
	КонецЦикла;
	
	Если ВариантПоиска <> 0 Тогда
		
		// Заполним права доступа для данного объекта
		Для Каждого ТекущийОтбор Из УсловиеПоиска Цикл
			
			УсловиеПоиска.Вставить(ТекущийОтбор.Ключ, СтрокаЗаполнения[ТекущийОтбор.Ключ]);
			
		КонецЦикла;
		
		ЗаполнятьТекущийУровень = Истина;
		
		Если Не ПраваДоступаЗаполнения.НайтиСледующий(УсловиеПоиска) Тогда
			
			ЗаполнятьТекущийУровень = Ложь;
			
		КонецЕсли;
		
		// Найдем необходимый уровень для описания прав досупа элемента
		Если ПраваДоступаЗаполнения.ПравоДоступа <> NULL Тогда
			
			ТекущееПравоДоступа = ПраваДоступаЗаполнения;
			
		ИначеЕсли ЗаполнятьТекущийУровень Тогда
			
			ТекущееПравоДоступа = СтрокиСПравамиДоступаЭлементов(ПраваДоступаЗаполнения);
			
			Если ТекущееПравоДоступа = Неопределено
				ИЛИ Не ТекущееПравоДоступа.НайтиСледующий(УсловиеПоиска) Тогда
				
				ЗаполнятьТекущийУровень = Ложь;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Пока ЗаполнятьТекущийУровень Цикл
			
			ИмяПравоДоступа = гпр_РаботаСКонфигурациейСерверПовтИсп.ИмяРеквизитаПоПравамДоступа(ТекущееПравоДоступа.ПравоДоступа);
			
			Если ЗначениеЗаполнено(ИмяПравоДоступа) Тогда
			
				СтрокаЗаполнения[ИмяПравоДоступа] = Макс(ТекущееПравоДоступа.ЗначениеПраваДоступа, СтрокаЗаполнения[ИмяПравоДоступа]);
			
				// Заполнить ограничения доступа
				Если Не ЗначениеЗаполнено(СтрокаЗаполнения.ИдентификаторСтроки) Тогда
					
					СтрокаЗаполнения.ИдентификаторСтроки = ТекущееПравоДоступа.ИдентификаторСтроки;
				
				КонецЕсли;
			
			Если ВариантПоиска = 2 Тогда
				
				// Почистим прошлые ограничения
				УсловиеПоискаОграничений = Новый Структура(
					"ИдентификаторОбъекта, ПравоДоступа",
					СтрокаЗаполнения.ИдентификаторСтроки,
					ТекущееПравоДоступа.ПравоДоступа);
				
				НайденныеОграничения = ОграниченияДоступаОбъектов.НайтиСтроки(УсловиеПоискаОграничений);
				
				Для Каждого ТекущаяСтрокаОграничения Из НайденныеОграничения Цикл
					
					ОграниченияДоступаОбъектов.Удалить(ТекущаяСтрокаОграничения);
					
				КонецЦикла;
				
				// Добавим ограничения доступа
				УсловиеПоискаОграничений = Новый Структура(
					"ИдентификаторСтроки",
					ТекущееПравоДоступа.ИдентификаторСтроки);
				НайденныеОграничения = ОграниченияДоступа.НайтиСтроки(УсловиеПоискаОграничений);
				
				Для Каждого ТекущееОграничение Из НайденныеОграничения Цикл
					
					НоваяСтрока = ОграниченияДоступаОбъектов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущееОграничение);
					НоваяСтрока.ИдентификаторОбъекта = СтрокаЗаполнения.ИдентификаторСтроки;
					НоваяСтрока.ПравоДоступа = ТекущееПравоДоступа.ПравоДоступа;
					СтрокаЗаполнения.ОграничениеДоступаКДанным = БиблиотекаКартинок.гпр_RLS;
					
				КонецЦикла;
			
			КонецЕсли; 
			
			КонецЕсли;
			
			Если Не ТекущееПравоДоступа.НайтиСледующий(УсловиеПоиска) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПраваДоступаЗаполнения.Сбросить();
		
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлементОбъекта Из СтрокаЗаполнения.ПолучитьЭлементы() Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоискаПодчиненный, ПодчиненныйЭлементОбъекта);
		
		Если НЕ ПраваДоступаЗаполнения.НайтиСледующий(УсловиеПоискаПодчиненный) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// По объектам будем иначе заполнять права доступа
		Если ВариантПоиска = 2 Тогда
			
			ЗаполнитьПодчиненнымПраваДоступа(
				СтрокаЗаполнения,
				ПраваДоступаЗаполнения,
				ПоляПоискаРеквизитов);
			
		Иначе
			
			ЗаполнитьПраваДоступа(
				ПодчиненныйЭлементОбъекта,
				ПраваДоступаЗаполнения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),
				ОграниченияДоступа,
				ПоляПоиска,
				ПоляПоискаРеквизитов,
				ВариантПоиска + 1);
			
		КонецЕсли;
		
		ПраваДоступаЗаполнения.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненнымПраваДоступа(ЭлементыОбъекта, ПраваДоступаОбъекта, УсловиеПоиска)
	
	Для Каждого ТекущийЭлементОбъекта Из ЭлементыОбъекта.ПолучитьЭлементы() Цикл
		
		ПраваДоступаОбъекта.Сбросить();
		
		УсловиеПоиска.ТипРеквизита = ТекущийЭлементОбъекта.ТипРеквизита;
		УсловиеПоиска.ИмяРеквизита = ТекущийЭлементОбъекта.ИмяРеквизита + "." + ТекущийЭлементОбъекта.ИмяРеквизитаТабличнойЧасти;
		
		Пока ПраваДоступаОбъекта.НайтиСледующий(УсловиеПоиска) Цикл
			
			ИмяПравоДоступа = СтрЗаменить(Строка(ПраваДоступаОбъекта.ПравоДоступа), " ", "");
			ТекущийЭлементОбъекта[ИмяПравоДоступа] = Макс(ПраваДоступаОбъекта.ЗначениеПраваДоступа, ТекущийЭлементОбъекта[ИмяПравоДоступа]);
			
			// Заполнить ограничения доступа
			Если Не ЗначениеЗаполнено(ТекущийЭлементОбъекта.ИдентификаторСтроки) Тогда
				
				ТекущийЭлементОбъекта.ИдентификаторСтроки = ПраваДоступаОбъекта.ИдентификаторСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Пойдем на уровень ниже
		ЗаполнитьПодчиненнымПраваДоступа(
			ТекущийЭлементОбъекта,
			ПраваДоступаОбъекта,
			УсловиеПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтрокиСПравамиДоступаЭлементов(СтрокаПравДоступа)
	
		ТекущийУровеньПравДоступа = СтрокаПравДоступа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ТекущийУровеньПравДоступа.Следующий() Тогда
			
			Если ТекущийУровеньПравДоступа.ПравоДоступа <> NULL Тогда
				
				Возврат СтрокаПравДоступа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			Иначе
				
				Возврат СтрокиСПравамиДоступаЭлементов(ТекущийУровеньПравДоступа);
				
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПреобразованныеПраваДоступа(ПраваДоступа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПравДоступа.ВидОбъекта КАК ВидОбъекта,
	               |	ТаблицаПравДоступа.ИмяОбъекта КАК ИмяОбъекта,
	               |	ТаблицаПравДоступа.ТипРеквизита КАК ТипРеквизита,
	               |	ТаблицаПравДоступа.ИмяРеквизита КАК ИмяРеквизита,
	               |	ТаблицаПравДоступа.ИмяРеквизитаТабличнойЧасти КАК ИмяРеквизитаТабличнойЧасти,
	               |	ТаблицаПравДоступа.ПравоДоступа КАК ПравоДоступа,
	               |	ТаблицаПравДоступа.ЗначениеПраваДоступа КАК ЗначениеПраваДоступа,
	               |	ТаблицаПравДоступа.ИдентификаторСтроки КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ ТаблицаПравДоступаРоли
	               |ИЗ
	               |	&ТаблицаПравДоступа КАК ТаблицаПравДоступа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПравДоступаРоли.ВидОбъекта КАК ВидОбъекта,
	               |	ТаблицаПравДоступаРоли.ИмяОбъекта КАК ИмяОбъекта,
				   |	ТаблицаПравДоступаРоли.ТипРеквизита КАК ТипРеквизита,
	               |	ТаблицаПравДоступаРоли.ИмяРеквизита + ""."" + ТаблицаПравДоступаРоли.ИмяРеквизитаТабличнойЧасти КАК ИмяРеквизита,
	               |	ТаблицаПравДоступаРоли.ПравоДоступа КАК ПравоДоступа,
	               |	ТаблицаПравДоступаРоли.ЗначениеПраваДоступа КАК ЗначениеПраваДоступа,
	               |	ТаблицаПравДоступаРоли.ИдентификаторСтроки КАК ИдентификаторСтроки
	               |ИЗ
	               |	ТаблицаПравДоступаРоли КАК ТаблицаПравДоступаРоли
	               |ИТОГИ ПО
	               |	ВидОбъекта,
	               |	ИмяОбъекта";
	Запрос.УстановитьПараметр("ТаблицаПравДоступа", ПраваДоступа);
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Процедура УпаковатьПраваДоступаВОбъект(Коллекция, ПраваДоступа, ОграниченияДоступа)
	
	Для Каждого ОбъектСправамиДоступа Из ПраваДоступа.ПолучитьЭлементы() Цикл
		
		УпаковатьДанныеОбОбъекте(Коллекция, ОбъектСправамиДоступа, ОграниченияДоступа);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УпаковатьДанныеОбОбъекте(Коллекция, Объект, ОграниченияДоступа, ДоступныеПраваДоступа = Неопределено)
	
	Если ДоступныеПраваДоступа = Неопределено Тогда
		ДоступныеПраваДоступа = гпр_РаботаСКонфигурациейСервер.ДоступныеВидуОбъектаПраваДоступа(Объект.ВидОбъекта);
	КонецЕсли;
	
	Для Каждого ПравоДоступа Из ДоступныеПраваДоступа Цикл
		
		СтруктураОтбора = Новый Структура(
			"ИдентификаторОбъекта,ПравоДоступа", 
			Объект.ИдентификаторСтроки,
			ПравоДоступа.Значение);
		НайденныеОграничения = ОграниченияДоступаОбъектов.НайтиСтроки(СтруктураОтбора);
		
		Если Не Объект[ПравоДоступа.Ключ]
			И НайденныеОграничения.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяЗапись = Коллекция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Объект);
		НоваяЗапись.ПравоДоступа = ПравоДоступа.Значение;
		НоваяЗапись.ЗначениеПраваДоступа = Объект[ПравоДоступа.Ключ];
		НоваяЗапись.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		
		Если ПустаяСтрока(НоваяЗапись.ИмяОбъекта) Тогда
			
			РодительОбъекта = Объект.ПолучитьРодителя();
			
			Пока Истина Цикл
				
				Если РодительОбъекта = Неопределено Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(РодительОбъекта.ИмяОбъекта) Тогда
					
					НоваяЗапись.ИмяОбъекта = РодительОбъекта.ИмяОбъекта;
					НоваяЗапись.ВидОбъекта = РодительОбъекта.ВидОбъекта;
					Прервать;
					
				КонецЕсли;	
				
				РодительОбъекта = РодительОбъекта.ПолучитьРодителя();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ОграничениеДоступа Из НайденныеОграничения Цикл
			
			НовоеОграничение = ОграниченияДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеОграничение, ОграничениеДоступа);
			НовоеОграничение.ИдентификаторСтроки = НоваяЗапись.ИдентификаторСтроки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Дочка Из Объект.ПолучитьЭлементы() Цикл
		
		Если НЕ ПустаяСтрока(Дочка.ИмяРеквизитаТабличнойЧасти) Тогда
			ДоступныеПраваДоступаРеквизита =
				гпр_РаботаСКонфигурациейСервер.ДоступныеТипуРеквизитаПраваДоступа(Перечисления.гпр_ТипыРеквизитовОбъекта.Реквизит);
		Иначе
			ДоступныеПраваДоступаРеквизита =
				гпр_РаботаСКонфигурациейСервер.ДоступныеТипуРеквизитаПраваДоступа(Дочка.ТипРеквизита);
		КонецЕсли;
		
		УпаковатьДанныеОбОбъекте(Коллекция, Дочка, ОграниченияДоступа, ДоступныеПраваДоступаРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеПраваДоступаОбщихПрав(Данные, ИмяПраваДоступа)
	
	Если Данные[ИмяПраваДоступа] Тогда
		
		ЗависимыеПраваДоступа = гпр_РаботаСКонфигурациейКлиентСервер.ЗависимыеПраваДоступа().Получить(ИмяПраваДоступа);
		
		Если ЗависимыеПраваДоступа = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого Зависимое Из ЗависимыеПраваДоступа Цикл
			
			Данные[Зависимое] = Данные[ИмяПраваДоступа];
			гпр_ОбщегоНазначенияКлиент.УстановитьЗначениеДляДетей(Данные, Зависимое);
			
		КонецЦикла;
		
	Иначе
		
		СвязьРеквизитов = гпр_РаботаСКонфигурациейКлиентСервер.СвязьРеквизитовПростогоИЭкспертногоРежимов();
		СвязьТекущегоРеквизита = СвязьРеквизитов[ИмяПраваДоступа];
		
		Для Каждого Зависимое Из СвязьТекущегоРеквизита Цикл
			
			Данные[Зависимое] = Данные[ИмяПраваДоступа];
			гпр_ОбщегоНазначенияКлиент.УстановитьЗначениеДляДетей(Данные, Зависимое);
			
		КонецЦикла;
		
		Для Каждого ОбщийРеквизит Из СвязьРеквизитов Цикл
			
			Если ОбщийРеквизит.Ключ = ИмяПраваДоступа Или ОбщийРеквизит.Значение.Найти(ИмяПраваДоступа) = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого Зависимое Из ОбщийРеквизит.Значение Цикл
				
				Данные[Зависимое] = Данные[ИмяПраваДоступа];
				гпр_ОбщегоНазначенияКлиент.УстановитьЗначениеДляДетей(Данные, Зависимое);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеПраваДоступа(Данные, ИмяПраваДоступа)
	
	Если Данные[ИмяПраваДоступа] Тогда
		
		ЗависимыеПраваДоступа = гпр_РаботаСКонфигурациейКлиентСервер.ЗависимыеПраваДоступа().Получить(ИмяПраваДоступа);
		
		Если ЗависимыеПраваДоступа = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого Зависимое Из ЗависимыеПраваДоступа Цикл
			
			Данные[Зависимое] = Данные[ИмяПраваДоступа];
			гпр_ОбщегоНазначенияКлиент.УстановитьЗначениеДляДетей(Данные, Зависимое);
			
		КонецЦикла;
		
	Иначе
		
		ЗависимыеПраваДоступа = гпр_РаботаСКонфигурациейКлиентСервер.ЗависимыеПраваДоступа();
		
		Для Каждого ПравоДоступа Из ЗависимыеПраваДоступа Цикл
			
			Если ПравоДоступа.Значение.Найти(ИмяПраваДоступа) <> Неопределено Тогда
				
				Данные[ПравоДоступа.Ключ] = Данные[ИмяПраваДоступа];
				гпр_ОбщегоНазначенияКлиент.УстановитьЗначениеДляДетей(Данные, ПравоДоступа.Ключ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОбщихПрав(Данные, ДоступныеПраваДоступа = Неопределено)
	
	СвязьРеквизитов = гпр_РаботаСКонфигурациейКлиентСервер.СвязьРеквизитовПростогоИЭкспертногоРежимов();
	
	Если ДоступныеПраваДоступа = Неопределено Тогда
		
		ДоступныеПраваДоступа = ДоступныеВидуОбъектаПраваДоступа(Данные.ВидОбъекта);
		
	КонецЕсли;
	
	Для Каждого ОбщийРеквизит Из СвязьРеквизитов Цикл
		
		КоличествоУстановленных = 0;
		ДолжноБытьУстановлено = 0;
		
		Для Каждого Реквизит Из ОбщийРеквизит.Значение Цикл
			
			Если Не ДоступныеПраваДоступа.Свойство(Реквизит) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Данные[Реквизит] Тогда
				
				КоличествоУстановленных = КоличествоУстановленных + 1;
				
			КонецЕсли;
			
			ДолжноБытьУстановлено = ДолжноБытьУстановлено + 1;
			
		КонецЦикла;
		
		Если КоличествоУстановленных = 0 Тогда
			
			Данные[ОбщийРеквизит.Ключ] = 0;
			
		ИначеЕсли КоличествоУстановленных = ДолжноБытьУстановлено Тогда
			
			Данные[ОбщийРеквизит.Ключ] = 1;
			
		Иначе
			
			Данные[ОбщийРеквизит.Ключ] = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Дочка Из Данные.ПолучитьЭлементы() Цикл
		
		ОбновитьЗначенияОбщихПрав(Дочка, ДоступныеПраваДоступа);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеВидуОбъектаПраваДоступа(ВидОбъекта)
	
	Возврат гпр_РаботаСКонфигурациейСервер.ДоступныеВидуОбъектаПраваДоступа(ВидОбъекта);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаОбъекта(СтрокаДерева)
	
	Если ПустаяСтрока(СтрокаДерева.ИмяРеквизита) И Не ЗначениеЗаполнено(СтрокаДерева.ТипРеквизита) Тогда
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
	Возврат ГруппировкаОбъекта(СтрокаДерева.ПолучитьРодителя());
	
КонецФункции

&НаКлиенте
Процедура НачатьПоискСвязанныхОбъектов()
	
	// Найдем текущий объект
	ТекущиеДанные = Элементы.ОбъектыКонфигурации.ТекущиеДанные;
	
	// Нет выделенной строки
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиИЗаполнитьСвязанныеОбъекты(
		ТекущиеДанные.ВидОбъекта,
		ТекущиеДанные.ИмяОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура НайтиИЗаполнитьСвязанныеОбъекты(ВидОбъекта, ИмяОбъекта)
	
	СвязанныеОбъекты = гпр_ЗагрузкаОбъектов.СвязанныеОбъекты(ВидОбъекта, ИмяОбъекта);
	ДобавитьОбъектыДляУстановкиПравДоступа(СвязанныеОбъекты);
	
КонецПроцедуры

#КонецОбласти

#Область ОрганичениеДоступаКДанным

&НаКлиенте
Процедура РедактироватьОграниченияДоступаОбъекта()
	
	ТекущиеДанные = Элементы.ОбъектыКонфигурации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru ='Не указан объект для изменений ограничений к данным.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОбъекте = ТекущиеДанные;
	
	Пока ДанныеОбОбъекте.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
		
		ДанныеОбОбъекте = ДанныеОбОбъекте.ПолучитьРодителя();
		
	КонецЦикла;
	
	НачатьРедактированиеОграниченийДоступа(
		ДанныеОбОбъекте.ИдентификаторСтроки,
		ДанныеОбОбъекте.ВидОбъекта,
		ДанныеОбОбъекте.Представление,
		ДанныеОбОбъекте.ИмяОбъекта
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРедактированиеОграниченийДоступа(
		ИдентификаторСтрокиОбъекта,
		ВидОбъекта,
		ПредставлениеОбъекта,
		ИмяОбъекта)
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"РедактированиеДоступаОбъектаЗавершение",
		ЭтотОбъект,
		Новый Структура("ИдентификтаорСтроки", ИдентификаторСтрокиОбъекта));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидОбъекта", ВидОбъекта);
	ПараметрыФормы.Вставить("ПредставлениеОбъекта", ПредставлениеОбъекта);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("АдресОграниченийПрав", АдресХраненияОграниченийПравДоступа(ИдентификаторСтрокиОбъекта));

	ОткрытьФорму(
		"Справочник.гпр_Роли.Форма.ФормаРедактированияОграниченияДоступаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикОповещения);	

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДоступаОбъектаЗавершение(
			РезультатОграниченийДоступа,
			ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОграниченийДоступа) Тогда
		Возврат;
	КонецЕсли;
	 		
	ЗаполнитьОграничениеДоступаОбъекта(
		РезультатОграниченийДоступа,
		ДополнительныеПараметры.ИдентификтаорСтроки); 		
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграничениеДоступаОбъекта(АдресОграниченийПравДоступа, ИдентификаторСтрокиОбъекта)
	
	// Определим, что у нас адрес временного хранилища
	Если НЕ ЭтоАдресВременногоХранилища(АдресОграниченийПравДоступа) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеОграниченийДоступа = ПолучитьИзВременногоХранилища(АдресОграниченийПравДоступа);
	
	Если ТипЗнч(ДанныеОграниченийДоступа) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ШаблоныОграниченийДоступа.Загрузить(ДанныеОграниченийДоступа.ШаблоныОграничений);
	
	// Удалим ранее введенные ограничения прав
	СтруктураОтбора = Новый Структура("ИдентификаторОбъекта", ИдентификаторСтрокиОбъекта);
	НайденныеСтроки = ОграниченияДоступаОбъектов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		
		ОграниченияДоступаОбъектов.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	// Добавим новые ограничения доступа, если такие имеются
	ДанныеОрганиченияДоступа = ДанныеОграниченийДоступа.ОграниченияПравДоступа;
	
	Для Каждого ТекущееОграничение Из ДанныеОрганиченияДоступа Цикл
		
		НоваяСтрока = ОграниченияДоступаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущееОграничение);
		НоваяСтрока.ИдентификаторОбъекта = ИдентификаторСтрокиОбъекта;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ОбъектыКонфигурации.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущийОбъект Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		
			Если ТекущийОбъект.ИдентификаторСтроки = ИдентификаторСтрокиОбъекта Тогда
				ТекущийОбъект.ОграничениеДоступаКДанным = ?(
					ДанныеОрганиченияДоступа.Количество() = 0,
					Неопределено,
					БиблиотекаКартинок.гпр_RLS);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция АдресХраненияОграниченийПравДоступа(СтрокаОбъекта)
	
	Результат = Новый Структура;
	Результат.Вставить("ШаблонОграничений", Объект.ШаблоныОграниченийДоступа.Выгрузить());
	
	ВсеОграничения = ОграниченияДоступаОбъектов.Выгрузить();
	УбратьОграничения = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВсеОграничения Цикл
		Если ТекущаяСтрока.ИдентификаторОбъекта = СтрокаОбъекта Тогда
			Продолжить;
		КонецЕсли;
		УбратьОграничения.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из УбратьОграничения Цикл
		ВсеОграничения.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	Результат.Вставить("ТекущиеОграниченияПравДоступа", ВсеОграничения);
	
	Возврат ПоместитьВоВременноеХранилище(Результат);
	
КонецФункции

&НаКлиенте
Процедура НачалоЗаполненияПравДоступаРолью()
	
	// проверим заполнение настроек для загрузки прав доступа роли
	Если Не УказанаНастройкаВыгрузкаРолиКонфигурации() Тогда
		
		// Открыть форму настройки параметров
		ОбработчикОповещения = Новый ОписаниеОповещения("ЗавершениеЗаполненияНастроекВыгрузкиКонфигурации", ЭтотОбъект);
		ОткрытьФорму(
			"ОбщаяФорма.гпр_НастройкаВыгрузкиРолиКонфигурации",,
			ЭтотОбъект,,,,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьЗаполнениеПравДоступаПоРоли();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УказанаНастройкаВыгрузкаРолиКонфигурации()
	
	Возврат ЗначениеЗаполнено(Константы.гпр_РежимВыгрузкиКонфигурации.Получить());
	
КонецФункции	

&НаКлиенте
Процедура ЗавершениеЗаполненияНастроекВыгрузкиКонфигурации(
		РезультЗаполненияНастроек,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(РезультЗаполненияНастроек) = Тип("Структура")
		И РезультЗаполненияНастроек.Свойство("ПрерватьЗаполнение") Тогда
			Возврат;
	КонецЕсли;
	
	ПродолжитьЗаполнениеПравДоступаПоРоли();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеПравДоступаПоРоли()
	
	Если ОбъектыКонфигурации.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ОбработкичкОповещения = Новый ОписаниеОповещения("ОчисткаПравДоступаПередВыборомРоли", ЭтотОбъект);
		ПоказатьВопрос(
			ОбработкичкОповещения,
			НСтр("ru ='Заполнены у роли права доступа. Очистить текущие настройки?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьВыборРоли();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПравДоступаПередВыборомРоли(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчищатьРолиПередЗаполнением = (Ответ = КодВозвратаДиалога.Да);
	ПродолжитьВыборРоли(ОчищатьРолиПередЗаполнением);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыборРоли(ОчищатьРоли = Ложь)
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ВыборРолиЗаполненияЗавершение",
		ЭтотОбъект,
		Новый Структура("ОчиститьРоли", ОчищатьРоли));
	
	ОткрытьФорму(
		"Справочник.гпр_Роли.Форма.ФормаВыбораРоли", , 
		ЭтотОбъект, , , , 
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВыборРолиЗаполненияЗавершение(РольЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РольЗаполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборРолиЗаполненияЗавершениеНаСервере(РольЗаполнения, ДополнительныеПараметры.ОчиститьРоли);
	
	Для Каждого ТекущийВидОбъекта Из ОбъектыКонфигурации.ПолучитьЭлементы() Цикл
		
		ОбновитьЗначенияОбщихПрав(ТекущийВидОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыборРолиЗаполненияЗавершениеНаСервере(РольЗаполнения, ОчиститьРоли)
	
	ДанныеЗаполнения = гпр_ЗагрузкаОбъектов.ПраваДоступаРоли(РольЗаполнения);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ТекстОшибки) Тогда
		
		СообщениеПользователя = Новый СообщениеПользователю;
		СообщениеПользователя.Текст = ДанныеЗаполнения.ТекстОшибки;
		СообщениеПользователя.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если ОчиститьРоли Тогда
		
		ОбъектыКонфигурации.ПолучитьЭлементы().Очистить();
		Объект.ПраваДоступа.Очистить();
		Объект.ОграниченияДоступаКДанным.Очистить();
		Объект.ШаблоныОграниченийДоступа.Очистить();
		ВидыОбъектовВДереве.Очистить();
		ОбъектыВДереве.Очистить();
		ЗаполнитьВидыОбъектовВДереве();
		
	КонецЕсли;
	
	ЗаполнитьРедакторРолейПоПравамДоступа(ДанныеЗаполнения.ПраваДоступа, ДанныеЗаполнения.ОграниченияДоступаКДанным);
	
	// Заполним шаблоны ограничений
	СписокИменШаблонов = Объект.ШаблоныОграниченийДоступа.Выгрузить().ВыгрузитьКолонку("ИмяШаблона");
	
	Для Каждого ТекущийШаблонОграничений Из ДанныеЗаполнения.ШаблоныОграниченийДоступа Цикл
		
		Если СписокИменШаблонов.Найти(ТекущийШаблонОграничений.ИмяШаблона) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект.ШаблоныОграниченийДоступа.Добавить(), ТекущийШаблонОграничений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьОбъектыКонфигурации(СтрокиДляСворачивания, Развернуть = Ложь)
	
	Для Каждого ТекущийОбъект Из СтрокиДляСворачивания.ПолучитьЭлементы() Цикл
		
		Если Развернуть Тогда
			
			Элементы.ОбъектыКонфигурации.Развернуть(ТекущийОбъект.ПолучитьИдентификатор(), Истина);
			
		Иначе
			
			Если ТекущийОбъект.ПолучитьЭлементы().Количество() > 0
				И ТекущийОбъект.ТипРеквизита = ПредопределенноеЗначение("Перечисление.гпр_ТипыРеквизитовОбъекта.ПустаяСсылка") Тогда
				СвернутьРазвернутьОбъектыКонфигурации(ТекущийОбъект, Ложь);
			КонецЕсли;
			Элементы.ОбъектыКонфигурации.Свернуть(ТекущийОбъект.ПолучитьИдентификатор());
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Фильтры

&НаСервере
Процедура ФильтрТолькоСвязанныеОбъектыНаСервере(ВидОбъекта, ИмяОбъекта, ОтменитьФильтр)
	
	Если ОтменитьФильтр Тогда
		
		// Установим использование условного оформления
		УдалитьУсловноеОформление = Новый Массив;
		Для Каждого ТекущееОформление Из УсловноеОформление.Элементы Цикл
			
			Если ТекущееОформление.Представление = "ФильтрСвязанныхОбъектов"
				ИЛИ ТекущееОформление.Представление = "ВыделитьСтрокуИмениОбъекта" Тогда
				
				УдалитьУсловноеОформление.Добавить(ТекущееОформление);
				
			КонецЕсли;
			
		КонецЦикла;		
		
		Для Каждого ТекущееОформление Из УдалитьУсловноеОформление Цикл
			
			УсловноеОформление.Элементы.Удалить(ТекущееОформление);
			
		КонецЦикла;
			
		СписокНеСвязанныхОбъектов.Очистить();
		Возврат;
		
	КонецЕсли;
	
	СвязанныеОбъекты = гпр_ЗагрузкаОбъектов.СвязанныеОбъекты(ВидОбъекта, ИмяОбъекта);
	
	// Формируем список связанных
	
	Для Каждого ОбъектДерева Из ОбъектыВДереве Цикл
		
		Если ИмяОбъекта = ОбъектДерева.ИмяОбъекта
			ИЛИ СвязанныеОбъекты.Получить(ОбъектДерева.ИмяОбъекта) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокНеСвязанныхОбъектов.Добавить(ОбъектДерева.ИмяОбъекта);
		
	КонецЦикла;
	
	УстановитьФильтрПоСвязаннымОбъектам(ВидОбъекта, ИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
